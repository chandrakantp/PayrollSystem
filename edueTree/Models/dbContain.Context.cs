//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace edueTree.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class dbContainer : DbContext
    {
        public dbContainer()
            : base("name=dbContainer")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AdvanceRequest> AdvanceRequests { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserRole> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<AttendanceRequest> AttendanceRequests { get; set; }
        public virtual DbSet<Bonu> Bonus { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<CompansationRequest> CompansationRequests { get; set; }
        public virtual DbSet<CompansationTran> CompansationTrans { get; set; }
        public virtual DbSet<ComputerAssinged> ComputerAssingeds { get; set; }
        public virtual DbSet<Config> Configs { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Designation> Designations { get; set; }
        public virtual DbSet<DurationTran> DurationTrans { get; set; }
        public virtual DbSet<EventLog> EventLogs { get; set; }
        public virtual DbSet<Event> Events { get; set; }
        public virtual DbSet<GeneratedSalary> GeneratedSalaries { get; set; }
        public virtual DbSet<GeneratedSalaryVariable> GeneratedSalaryVariables { get; set; }
        public virtual DbSet<Holiday> Holidays { get; set; }
        public virtual DbSet<InActiveResion> InActiveResions { get; set; }
        public virtual DbSet<LeaveBalance> LeaveBalances { get; set; }
        public virtual DbSet<LeaveRequest> LeaveRequests { get; set; }
        public virtual DbSet<LeaveType> LeaveTypes { get; set; }
        public virtual DbSet<LoginLog> LoginLogs { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<MenuItem> MenuItems { get; set; }
        public virtual DbSet<NetDurationTotal> NetDurationTotals { get; set; }
        public virtual DbSet<notice> notices { get; set; }
        public virtual DbSet<num> nums { get; set; }
        public virtual DbSet<OptionalHoliday> OptionalHolidays { get; set; }
        public virtual DbSet<OptionalHolidayTran> OptionalHolidayTrans { get; set; }
        public virtual DbSet<PreviousEduInfo> PreviousEduInfoes { get; set; }
        public virtual DbSet<ShiftHistory> ShiftHistories { get; set; }
        public virtual DbSet<StaffDesignation> StaffDesignations { get; set; }
        public virtual DbSet<StaffDocument> StaffDocuments { get; set; }
        public virtual DbSet<StaffEducation> StaffEducations { get; set; }
        public virtual DbSet<StaticIP> StaticIPs { get; set; }
        public virtual DbSet<Subject> Subjects { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<Weekend> Weekends { get; set; }
        public virtual DbSet<WorkExperiance> WorkExperiances { get; set; }
        public virtual DbSet<Degree> Degrees { get; set; }
        public virtual DbSet<DegreeSubject> DegreeSubjects { get; set; }
        public virtual DbSet<EsiInfo> EsiInfoes { get; set; }
        public virtual DbSet<EPFDetail> EPFDetails { get; set; }
        public virtual DbSet<insuranceinfo> insuranceinfoes { get; set; }
        public virtual DbSet<Undertaking> Undertakings { get; set; }
        public virtual DbSet<NomineeDetail> NomineeDetails { get; set; }
        public virtual DbSet<EsiFamily> EsiFamilies { get; set; }
        public virtual DbSet<TrainingFeedback> TrainingFeedbacks { get; set; }
        public virtual DbSet<TblUniversal> TblUniversals { get; set; }
        public virtual DbSet<BankInfo> BankInfoes { get; set; }
        public virtual DbSet<LeavePassbook> LeavePassbooks { get; set; }
        public virtual DbSet<TblLeaveRecord> TblLeaveRecords { get; set; }
        public virtual DbSet<MachineConfigure> MachineConfigures { get; set; }
        public virtual DbSet<MemberattendaceConfig> MemberattendaceConfigs { get; set; }
        public virtual DbSet<ShiftMaster> ShiftMasters { get; set; }
        public virtual DbSet<AssignShift> AssignShifts { get; set; }
        public virtual DbSet<BufferTimeSetting> BufferTimeSettings { get; set; }
        public virtual DbSet<EditPermission> EditPermissions { get; set; }
        public virtual DbSet<TblEmailConfig> TblEmailConfigs { get; set; }
        public virtual DbSet<PayrollConfig> PayrollConfigs { get; set; }
        public virtual DbSet<VisaPassport> VisaPassports { get; set; }
        public virtual DbSet<FeedbackFormMaster> FeedbackFormMasters { get; set; }
        public virtual DbSet<QuestionMaster> QuestionMasters { get; set; }
        public virtual DbSet<QuestionAssigment> QuestionAssigments { get; set; }
        public virtual DbSet<Training> Trainings { get; set; }
        public virtual DbSet<TblRating> TblRatings { get; set; }
        public virtual DbSet<LeaveMaster> LeaveMasters { get; set; }
        public virtual DbSet<TblFormAssignment> TblFormAssignments { get; set; }
        public virtual DbSet<TblFormEvaluator> TblFormEvaluators { get; set; }
        public virtual DbSet<TblSection> TblSections { get; set; }
        public virtual DbSet<MonthlyTTarget> MonthlyTTargets { get; set; }
        public virtual DbSet<VarienceReport> VarienceReports { get; set; }
        public virtual DbSet<AttendanceStaff> AttendanceStaffs { get; set; }
        public virtual DbSet<tblEventLog> tblEventLogs { get; set; }
        public virtual DbSet<TblNetDurationUsersName> TblNetDurationUsersNames { get; set; }
        public virtual DbSet<TblAverageTime> TblAverageTimes { get; set; }
        public virtual DbSet<LeaveRecordNew> LeaveRecordNews { get; set; }
        public virtual DbSet<TblAverageTimeForAttendanceSheet> TblAverageTimeForAttendanceSheets { get; set; }
        public virtual DbSet<Permission> Permissions { get; set; }
        public virtual DbSet<TblAllowance> TblAllowances { get; set; }
        public virtual DbSet<TblAllowTransaction> TblAllowTransactions { get; set; }
        public virtual DbSet<TblLoginCounter> TblLoginCounters { get; set; }
        public virtual DbSet<TblLoginRecord> TblLoginRecords { get; set; }
        public virtual DbSet<SalaryStructure> SalaryStructures { get; set; }
        public virtual DbSet<Structurepermission> Structurepermissions { get; set; }
        public virtual DbSet<AdvanceEMI> AdvanceEMIs { get; set; }
        public virtual DbSet<CoumputedValue> CoumputedValues { get; set; }
        public virtual DbSet<TblGratuityCalculation> TblGratuityCalculations { get; set; }
        public virtual DbSet<TblSpecifiedFormula> TblSpecifiedFormulas { get; set; }
        public virtual DbSet<Staff> Staffs { get; set; }
        public virtual DbSet<Reporting> Reportings { get; set; }
        public virtual DbSet<tblSalaryCalculateRule> tblSalaryCalculateRules { get; set; }
        public virtual DbSet<TblCalculateMonth> TblCalculateMonths { get; set; }
        public virtual DbSet<StaffCTC> StaffCTCs { get; set; }
        public virtual DbSet<MonthlyAttenDetail> MonthlyAttenDetails { get; set; }
        public virtual DbSet<SalaryVariable> SalaryVariables { get; set; }
        public virtual DbSet<TblOvertimeCalculate> TblOvertimeCalculates { get; set; }
        public virtual DbSet<TblPayheadType> TblPayheadTypes { get; set; }
        public virtual DbSet<VariableSetting> VariableSettings { get; set; }
        public virtual DbSet<FailureSignupFirm> FailureSignupFirms { get; set; }
        public virtual DbSet<FirmInfo> FirmInfoes { get; set; }
    
        public virtual ObjectResult<BounusReport_Result> BounusReport(Nullable<int> staffId)
        {
            var staffIdParameter = staffId.HasValue ?
                new ObjectParameter("staffId", staffId) :
                new ObjectParameter("staffId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BounusReport_Result>("BounusReport", staffIdParameter);
        }
    
        public virtual ObjectResult<BounusReportForMeddataCarePro_Result> BounusReportForMeddataCarePro(Nullable<int> staffId)
        {
            var staffIdParameter = staffId.HasValue ?
                new ObjectParameter("staffId", staffId) :
                new ObjectParameter("staffId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BounusReportForMeddataCarePro_Result>("BounusReportForMeddataCarePro", staffIdParameter);
        }
    
        public virtual int ClassDisplay()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ClassDisplay");
        }
    
        public virtual ObjectResult<EmployeeLedger_Result> EmployeeLedger(Nullable<int> employeeId, Nullable<int> fromMonth, Nullable<int> fromyear, Nullable<int> toMonth, Nullable<int> toyear)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(int));
    
            var fromMonthParameter = fromMonth.HasValue ?
                new ObjectParameter("fromMonth", fromMonth) :
                new ObjectParameter("fromMonth", typeof(int));
    
            var fromyearParameter = fromyear.HasValue ?
                new ObjectParameter("fromyear", fromyear) :
                new ObjectParameter("fromyear", typeof(int));
    
            var toMonthParameter = toMonth.HasValue ?
                new ObjectParameter("toMonth", toMonth) :
                new ObjectParameter("toMonth", typeof(int));
    
            var toyearParameter = toyear.HasValue ?
                new ObjectParameter("toyear", toyear) :
                new ObjectParameter("toyear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeLedger_Result>("EmployeeLedger", employeeIdParameter, fromMonthParameter, fromyearParameter, toMonthParameter, toyearParameter);
        }
    
        public virtual ObjectResult<EmployeeLedgerMedDataCarePro_Result> EmployeeLedgerMedDataCarePro(Nullable<int> employeeId, Nullable<int> fromMonth, Nullable<int> fromyear, Nullable<int> toMonth, Nullable<int> toyear)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(int));
    
            var fromMonthParameter = fromMonth.HasValue ?
                new ObjectParameter("fromMonth", fromMonth) :
                new ObjectParameter("fromMonth", typeof(int));
    
            var fromyearParameter = fromyear.HasValue ?
                new ObjectParameter("fromyear", fromyear) :
                new ObjectParameter("fromyear", typeof(int));
    
            var toMonthParameter = toMonth.HasValue ?
                new ObjectParameter("toMonth", toMonth) :
                new ObjectParameter("toMonth", typeof(int));
    
            var toyearParameter = toyear.HasValue ?
                new ObjectParameter("toyear", toyear) :
                new ObjectParameter("toyear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeLedgerMedDataCarePro_Result>("EmployeeLedgerMedDataCarePro", employeeIdParameter, fromMonthParameter, fromyearParameter, toMonthParameter, toyearParameter);
        }
    
        [DbFunction("dbContainer", "ExplodeDates")]
        public virtual IQueryable<ExplodeDates_Result> ExplodeDates(Nullable<System.DateTime> startdate, string fromSession, Nullable<System.DateTime> enddate, string toSession, string leaveType)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var fromSessionParameter = fromSession != null ?
                new ObjectParameter("fromSession", fromSession) :
                new ObjectParameter("fromSession", typeof(string));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var toSessionParameter = toSession != null ?
                new ObjectParameter("toSession", toSession) :
                new ObjectParameter("toSession", typeof(string));
    
            var leaveTypeParameter = leaveType != null ?
                new ObjectParameter("LeaveType", leaveType) :
                new ObjectParameter("LeaveType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ExplodeDates_Result>("[dbContainer].[ExplodeDates](@startdate, @fromSession, @enddate, @toSession, @LeaveType)", startdateParameter, fromSessionParameter, enddateParameter, toSessionParameter, leaveTypeParameter);
        }
    
        [DbFunction("dbContainer", "GetAttendanceIndividualy")]
        public virtual IQueryable<GetAttendanceIndividualy_Result> GetAttendanceIndividualy(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> empId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("empId", empId) :
                new ObjectParameter("empId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAttendanceIndividualy_Result>("[dbContainer].[GetAttendanceIndividualy](@fromDate, @toDate, @empId)", fromDateParameter, toDateParameter, empIdParameter);
        }
    
        public virtual ObjectResult<GetAttendanceMed_Result> GetAttendanceMed(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAttendanceMed_Result>("GetAttendanceMed", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("dbContainer", "GetAttendanceShiftWiseIndividuallyMed")]
        public virtual IQueryable<GetAttendanceShiftWiseIndividuallyMed_Result> GetAttendanceShiftWiseIndividuallyMed(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> empId, Nullable<int> shiftId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("empId", empId) :
                new ObjectParameter("empId", typeof(int));
    
            var shiftIdParameter = shiftId.HasValue ?
                new ObjectParameter("shiftId", shiftId) :
                new ObjectParameter("shiftId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAttendanceShiftWiseIndividuallyMed_Result>("[dbContainer].[GetAttendanceShiftWiseIndividuallyMed](@fromDate, @toDate, @empId, @shiftId)", fromDateParameter, toDateParameter, empIdParameter, shiftIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetBalanceLeaves(Nullable<int> staffId)
        {
            var staffIdParameter = staffId.HasValue ?
                new ObjectParameter("staffId", staffId) :
                new ObjectParameter("staffId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetBalanceLeaves", staffIdParameter);
        }
    
        [DbFunction("dbContainer", "GetCalculateSalaryIndividually")]
        public virtual IQueryable<GetCalculateSalaryIndividually_Result> GetCalculateSalaryIndividually(Nullable<int> month, Nullable<int> year, Nullable<int> staffId)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var staffIdParameter = staffId.HasValue ?
                new ObjectParameter("staffId", staffId) :
                new ObjectParameter("staffId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCalculateSalaryIndividually_Result>("[dbContainer].[GetCalculateSalaryIndividually](@month, @year, @staffId)", monthParameter, yearParameter, staffIdParameter);
        }
    
        public virtual ObjectResult<string> GetLoginUserPhoto(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetLoginUserPhoto", userIdParameter);
        }
    
        public virtual ObjectResult<GetMenuUserWise_Result> GetMenuUserWise(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMenuUserWise_Result>("GetMenuUserWise", userIdParameter);
        }
    
        public virtual ObjectResult<GetNetDurationDateWise_Result> GetNetDurationDateWise(Nullable<System.DateTime> startdate, Nullable<System.DateTime> endTime)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("endTime", endTime) :
                new ObjectParameter("endTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNetDurationDateWise_Result>("GetNetDurationDateWise", startdateParameter, endTimeParameter);
        }
    
        public virtual ObjectResult<GetNetDurationTodaysHistory_Result> GetNetDurationTodaysHistory(Nullable<System.DateTime> date, Nullable<int> staffId)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var staffIdParameter = staffId.HasValue ?
                new ObjectParameter("staffId", staffId) :
                new ObjectParameter("staffId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNetDurationTodaysHistory_Result>("GetNetDurationTodaysHistory", dateParameter, staffIdParameter);
        }
    
        public virtual ObjectResult<HeadCalculateWithCTC_Result> HeadCalculateWithCTC(Nullable<int> deptId, Nullable<decimal> amt)
        {
            var deptIdParameter = deptId.HasValue ?
                new ObjectParameter("deptId", deptId) :
                new ObjectParameter("deptId", typeof(int));
    
            var amtParameter = amt.HasValue ?
                new ObjectParameter("amt", amt) :
                new ObjectParameter("amt", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HeadCalculateWithCTC_Result>("HeadCalculateWithCTC", deptIdParameter, amtParameter);
        }
    
        public virtual int InitialRecords()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InitialRecords");
        }
    
        public virtual int UpdateSalaryWithStrucure(Nullable<int> monthlyAttenDetailId, Nullable<int> staffId, Nullable<decimal> totalAmount, Nullable<decimal> paybleDays, string generatedBy, Nullable<int> month, Nullable<int> year, Nullable<decimal> absenceAmt, Nullable<decimal> bonus, string narration)
        {
            var monthlyAttenDetailIdParameter = monthlyAttenDetailId.HasValue ?
                new ObjectParameter("monthlyAttenDetailId", monthlyAttenDetailId) :
                new ObjectParameter("monthlyAttenDetailId", typeof(int));
    
            var staffIdParameter = staffId.HasValue ?
                new ObjectParameter("staffId", staffId) :
                new ObjectParameter("staffId", typeof(int));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("totalAmount", totalAmount) :
                new ObjectParameter("totalAmount", typeof(decimal));
    
            var paybleDaysParameter = paybleDays.HasValue ?
                new ObjectParameter("paybleDays", paybleDays) :
                new ObjectParameter("paybleDays", typeof(decimal));
    
            var generatedByParameter = generatedBy != null ?
                new ObjectParameter("generatedBy", generatedBy) :
                new ObjectParameter("generatedBy", typeof(string));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var absenceAmtParameter = absenceAmt.HasValue ?
                new ObjectParameter("absenceAmt", absenceAmt) :
                new ObjectParameter("absenceAmt", typeof(decimal));
    
            var bonusParameter = bonus.HasValue ?
                new ObjectParameter("bonus", bonus) :
                new ObjectParameter("bonus", typeof(decimal));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSalaryWithStrucure", monthlyAttenDetailIdParameter, staffIdParameter, totalAmountParameter, paybleDaysParameter, generatedByParameter, monthParameter, yearParameter, absenceAmtParameter, bonusParameter, narrationParameter);
        }
    
        public virtual ObjectResult<CalendarList_Result> CalendarList(Nullable<int> staffId, Nullable<int> firmId)
        {
            var staffIdParameter = staffId.HasValue ?
                new ObjectParameter("StaffId", staffId) :
                new ObjectParameter("StaffId", typeof(int));
    
            var firmIdParameter = firmId.HasValue ?
                new ObjectParameter("firmId", firmId) :
                new ObjectParameter("firmId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CalendarList_Result>("CalendarList", staffIdParameter, firmIdParameter);
        }
    
        public virtual ObjectResult<GenarateSalary_Result> GenarateSalary(Nullable<int> month, Nullable<int> year, Nullable<int> firmid)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GenarateSalary_Result>("GenarateSalary", monthParameter, yearParameter, firmidParameter);
        }
    
        public virtual ObjectResult<SalaryReport_Result> SalaryReport(Nullable<int> month, Nullable<int> year, Nullable<int> firmId)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var firmIdParameter = firmId.HasValue ?
                new ObjectParameter("firmId", firmId) :
                new ObjectParameter("firmId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SalaryReport_Result>("SalaryReport", monthParameter, yearParameter, firmIdParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> IpFilteringAuthentication(string ip, string userId)
        {
            var ipParameter = ip != null ?
                new ObjectParameter("ip", ip) :
                new ObjectParameter("ip", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("IpFilteringAuthentication", ipParameter, userIdParameter);
        }
    
        [DbFunction("dbContainer", "SplitInts")]
        public virtual IQueryable<Nullable<int>> SplitInts(string list, string delimiter)
        {
            var listParameter = list != null ?
                new ObjectParameter("List", list) :
                new ObjectParameter("List", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<int>>("[dbContainer].[SplitInts](@List, @Delimiter)", listParameter, delimiterParameter);
        }
    
        public virtual ObjectResult<GetLeaveBalanceLeaveTypeWise_Result> GetLeaveBalanceLeaveTypeWise(Nullable<int> empId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("empId", empId) :
                new ObjectParameter("empId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLeaveBalanceLeaveTypeWise_Result>("GetLeaveBalanceLeaveTypeWise", empIdParameter);
        }
    
        public virtual ObjectResult<EventLogTran_Result> EventLogTran(Nullable<int> staffId, Nullable<System.DateTime> date)
        {
            var staffIdParameter = staffId.HasValue ?
                new ObjectParameter("staffId", staffId) :
                new ObjectParameter("staffId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EventLogTran_Result>("EventLogTran", staffIdParameter, dateParameter);
        }
    
        public virtual int RuntimeCalculationNetDuration(Nullable<System.DateTime> date, string user)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var userParameter = user != null ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RuntimeCalculationNetDuration", dateParameter, userParameter);
        }
    
        public virtual ObjectResult<PreSalaryMonthwise_Result> PreSalaryMonthwise(Nullable<int> month, Nullable<int> year)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PreSalaryMonthwise_Result>("PreSalaryMonthwise", monthParameter, yearParameter);
        }
    
        public virtual ObjectResult<NetDurationDaywiseAllEmp_Result> NetDurationDaywiseAllEmp(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NetDurationDaywiseAllEmp_Result>("NetDurationDaywiseAllEmp", dateParameter);
        }
    
        public virtual ObjectResult<NetDurationMonthwisesingleEmp_Result> NetDurationMonthwisesingleEmp(Nullable<System.DateTime> date, Nullable<System.DateTime> date2, Nullable<int> staffId)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("date2", date2) :
                new ObjectParameter("date2", typeof(System.DateTime));
    
            var staffIdParameter = staffId.HasValue ?
                new ObjectParameter("staffId", staffId) :
                new ObjectParameter("staffId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NetDurationMonthwisesingleEmp_Result>("NetDurationMonthwisesingleEmp", dateParameter, date2Parameter, staffIdParameter);
        }
    
        public virtual ObjectResult<EmployeeLeaveBucket_Result> EmployeeLeaveBucket(Nullable<int> staffid)
        {
            var staffidParameter = staffid.HasValue ?
                new ObjectParameter("Staffid", staffid) :
                new ObjectParameter("Staffid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeLeaveBucket_Result>("EmployeeLeaveBucket", staffidParameter);
        }
    
        public virtual ObjectResult<EmployeeLeavePassbook_Result> EmployeeLeavePassbook(Nullable<int> staffid)
        {
            var staffidParameter = staffid.HasValue ?
                new ObjectParameter("Staffid", staffid) :
                new ObjectParameter("Staffid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeLeavePassbook_Result>("EmployeeLeavePassbook", staffidParameter);
        }
    
        public virtual ObjectResult<GetLeaveEmployeeLeaveBalance_Result> GetLeaveEmployeeLeaveBalance(Nullable<int> staffid, Nullable<int> leavetypeid)
        {
            var staffidParameter = staffid.HasValue ?
                new ObjectParameter("Staffid", staffid) :
                new ObjectParameter("Staffid", typeof(int));
    
            var leavetypeidParameter = leavetypeid.HasValue ?
                new ObjectParameter("Leavetypeid", leavetypeid) :
                new ObjectParameter("Leavetypeid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLeaveEmployeeLeaveBalance_Result>("GetLeaveEmployeeLeaveBalance", staffidParameter, leavetypeidParameter);
        }
    
        public virtual ObjectResult<GetAllmemberEnroll_Result> GetAllmemberEnroll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllmemberEnroll_Result>("GetAllmemberEnroll");
        }
    
        public virtual ObjectResult<EmployeeLeaveBalance_Result> EmployeeLeaveBalance(Nullable<int> firmId)
        {
            var firmIdParameter = firmId.HasValue ?
                new ObjectParameter("FirmId", firmId) :
                new ObjectParameter("FirmId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeLeaveBalance_Result>("EmployeeLeaveBalance", firmIdParameter);
        }
    
        public virtual ObjectResult<EmployeeLeaveBalance1_Result> EmployeeLeaveBalance1(Nullable<int> firmId)
        {
            var firmIdParameter = firmId.HasValue ?
                new ObjectParameter("FirmId", firmId) :
                new ObjectParameter("FirmId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeLeaveBalance1_Result>("EmployeeLeaveBalance1", firmIdParameter);
        }
    
        public virtual ObjectResult<EmployeeLeaveBucket1_Result> EmployeeLeaveBucket1(Nullable<int> staffid)
        {
            var staffidParameter = staffid.HasValue ?
                new ObjectParameter("Staffid", staffid) :
                new ObjectParameter("Staffid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeLeaveBucket1_Result>("EmployeeLeaveBucket1", staffidParameter);
        }
    
        public virtual ObjectResult<GetEnrollmemberById_Result> GetEnrollmemberById(Nullable<int> staffid)
        {
            var staffidParameter = staffid.HasValue ?
                new ObjectParameter("staffid", staffid) :
                new ObjectParameter("staffid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEnrollmemberById_Result>("GetEnrollmemberById", staffidParameter);
        }
    
        public virtual ObjectResult<EmployeeLeaveBalance2_Result> EmployeeLeaveBalance2(Nullable<int> firmId)
        {
            var firmIdParameter = firmId.HasValue ?
                new ObjectParameter("FirmId", firmId) :
                new ObjectParameter("FirmId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeLeaveBalance2_Result>("EmployeeLeaveBalance2", firmIdParameter);
        }
    
        public virtual ObjectResult<EmployeeLeaveBucket2_Result> EmployeeLeaveBucket2(Nullable<int> staffid)
        {
            var staffidParameter = staffid.HasValue ?
                new ObjectParameter("Staffid", staffid) :
                new ObjectParameter("Staffid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeLeaveBucket2_Result>("EmployeeLeaveBucket2", staffidParameter);
        }
    
        public virtual int UpdateSalaryWithStrucure1(Nullable<int> monthlyAttenDetailId, Nullable<int> staffId, Nullable<decimal> totalAmount, Nullable<decimal> paybleDays, string generatedBy, Nullable<int> month, Nullable<int> year, Nullable<decimal> absenceAmt, Nullable<decimal> bonus, string narration)
        {
            var monthlyAttenDetailIdParameter = monthlyAttenDetailId.HasValue ?
                new ObjectParameter("monthlyAttenDetailId", monthlyAttenDetailId) :
                new ObjectParameter("monthlyAttenDetailId", typeof(int));
    
            var staffIdParameter = staffId.HasValue ?
                new ObjectParameter("staffId", staffId) :
                new ObjectParameter("staffId", typeof(int));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("totalAmount", totalAmount) :
                new ObjectParameter("totalAmount", typeof(decimal));
    
            var paybleDaysParameter = paybleDays.HasValue ?
                new ObjectParameter("paybleDays", paybleDays) :
                new ObjectParameter("paybleDays", typeof(decimal));
    
            var generatedByParameter = generatedBy != null ?
                new ObjectParameter("generatedBy", generatedBy) :
                new ObjectParameter("generatedBy", typeof(string));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var absenceAmtParameter = absenceAmt.HasValue ?
                new ObjectParameter("absenceAmt", absenceAmt) :
                new ObjectParameter("absenceAmt", typeof(decimal));
    
            var bonusParameter = bonus.HasValue ?
                new ObjectParameter("bonus", bonus) :
                new ObjectParameter("bonus", typeof(decimal));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSalaryWithStrucure1", monthlyAttenDetailIdParameter, staffIdParameter, totalAmountParameter, paybleDaysParameter, generatedByParameter, monthParameter, yearParameter, absenceAmtParameter, bonusParameter, narrationParameter);
        }
    
        public virtual ObjectResult<AllEmployeeLeaveBalanceSheet_Result> AllEmployeeLeaveBalanceSheet(Nullable<int> firmId)
        {
            var firmIdParameter = firmId.HasValue ?
                new ObjectParameter("FirmId", firmId) :
                new ObjectParameter("FirmId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllEmployeeLeaveBalanceSheet_Result>("AllEmployeeLeaveBalanceSheet", firmIdParameter);
        }
    
        public virtual ObjectResult<GetAllAssignShiftByEmployee_Result> GetAllAssignShiftByEmployee(Nullable<int> firmid)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllAssignShiftByEmployee_Result>("GetAllAssignShiftByEmployee", firmidParameter);
        }
    
        public virtual ObjectResult<AllEmpDateWIseMachineData_Result> AllEmpDateWIseMachineData(Nullable<System.DateTime> startDate, Nullable<int> firmId)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var firmIdParameter = firmId.HasValue ?
                new ObjectParameter("firmId", firmId) :
                new ObjectParameter("firmId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllEmpDateWIseMachineData_Result>("AllEmpDateWIseMachineData", startDateParameter, firmIdParameter);
        }
    
        public virtual ObjectResult<GetReporting_Result> GetReporting(Nullable<int> firm)
        {
            var firmParameter = firm.HasValue ?
                new ObjectParameter("firm", firm) :
                new ObjectParameter("firm", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReporting_Result>("GetReporting", firmParameter);
        }
    
        public virtual int AddattendanceifnotExit(string enrollNumber, Nullable<int> inOutMode, Nullable<int> verifyMode, Nullable<int> worCode, Nullable<System.DateTime> attendDate, Nullable<int> firmId)
        {
            var enrollNumberParameter = enrollNumber != null ?
                new ObjectParameter("enrollNumber", enrollNumber) :
                new ObjectParameter("enrollNumber", typeof(string));
    
            var inOutModeParameter = inOutMode.HasValue ?
                new ObjectParameter("inOutMode", inOutMode) :
                new ObjectParameter("inOutMode", typeof(int));
    
            var verifyModeParameter = verifyMode.HasValue ?
                new ObjectParameter("verifyMode", verifyMode) :
                new ObjectParameter("verifyMode", typeof(int));
    
            var worCodeParameter = worCode.HasValue ?
                new ObjectParameter("worCode", worCode) :
                new ObjectParameter("worCode", typeof(int));
    
            var attendDateParameter = attendDate.HasValue ?
                new ObjectParameter("attendDate", attendDate) :
                new ObjectParameter("attendDate", typeof(System.DateTime));
    
            var firmIdParameter = firmId.HasValue ?
                new ObjectParameter("FirmId", firmId) :
                new ObjectParameter("FirmId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddattendanceifnotExit", enrollNumberParameter, inOutModeParameter, verifyModeParameter, worCodeParameter, attendDateParameter, firmIdParameter);
        }
    
        public virtual ObjectResult<AsignShiftBasedOnAttendaceInTime_Result> AsignShiftBasedOnAttendaceInTime(Nullable<int> firmId, Nullable<System.DateTime> selecteddate)
        {
            var firmIdParameter = firmId.HasValue ?
                new ObjectParameter("firmId", firmId) :
                new ObjectParameter("firmId", typeof(int));
    
            var selecteddateParameter = selecteddate.HasValue ?
                new ObjectParameter("selecteddate", selecteddate) :
                new ObjectParameter("selecteddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AsignShiftBasedOnAttendaceInTime_Result>("AsignShiftBasedOnAttendaceInTime", firmIdParameter, selecteddateParameter);
        }
    
        public virtual ObjectResult<EmpAllCheckinCheckout_Result> EmpAllCheckinCheckout(Nullable<int> firmid)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("Firmid", firmid) :
                new ObjectParameter("Firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmpAllCheckinCheckout_Result>("EmpAllCheckinCheckout", firmidParameter);
        }
    
        public virtual ObjectResult<AllCheckinandCkeckOutAllEmp_Result> AllCheckinandCkeckOutAllEmp(Nullable<System.DateTime> selectedDate, Nullable<int> firmid)
        {
            var selectedDateParameter = selectedDate.HasValue ?
                new ObjectParameter("selectedDate", selectedDate) :
                new ObjectParameter("selectedDate", typeof(System.DateTime));
    
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllCheckinandCkeckOutAllEmp_Result>("AllCheckinandCkeckOutAllEmp", selectedDateParameter, firmidParameter);
        }
    
        public virtual ObjectResult<CheckInCheckOutTest_Result> CheckInCheckOutTest(Nullable<System.DateTime> formDate, Nullable<System.DateTime> toDate, Nullable<int> firmid, Nullable<int> staffId)
        {
            var formDateParameter = formDate.HasValue ?
                new ObjectParameter("FormDate", formDate) :
                new ObjectParameter("FormDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            var staffIdParameter = staffId.HasValue ?
                new ObjectParameter("staffId", staffId) :
                new ObjectParameter("staffId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckInCheckOutTest_Result>("CheckInCheckOutTest", formDateParameter, toDateParameter, firmidParameter, staffIdParameter);
        }
    
        [DbFunction("dbContainer", "GetAttendanceShiftWiseIndividually")]
        public virtual IQueryable<GetAttendanceShiftWiseIndividually_Result> GetAttendanceShiftWiseIndividually(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> empId, Nullable<int> shiftId, Nullable<int> firmId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("empId", empId) :
                new ObjectParameter("empId", typeof(int));
    
            var shiftIdParameter = shiftId.HasValue ?
                new ObjectParameter("shiftId", shiftId) :
                new ObjectParameter("shiftId", typeof(int));
    
            var firmIdParameter = firmId.HasValue ?
                new ObjectParameter("firmId", firmId) :
                new ObjectParameter("firmId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAttendanceShiftWiseIndividually_Result>("[dbContainer].[GetAttendanceShiftWiseIndividually](@fromDate, @toDate, @empId, @shiftId, @firmId)", fromDateParameter, toDateParameter, empIdParameter, shiftIdParameter, firmIdParameter);
        }
    
        [DbFunction("dbContainer", "GetAttendanceShiftWiseIndividuallyNew")]
        public virtual IQueryable<GetAttendanceShiftWiseIndividuallyNew_Result> GetAttendanceShiftWiseIndividuallyNew(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> empId, Nullable<int> shiftId, Nullable<int> firmId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("empId", empId) :
                new ObjectParameter("empId", typeof(int));
    
            var shiftIdParameter = shiftId.HasValue ?
                new ObjectParameter("shiftId", shiftId) :
                new ObjectParameter("shiftId", typeof(int));
    
            var firmIdParameter = firmId.HasValue ?
                new ObjectParameter("firmId", firmId) :
                new ObjectParameter("firmId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAttendanceShiftWiseIndividuallyNew_Result>("[dbContainer].[GetAttendanceShiftWiseIndividuallyNew](@fromDate, @toDate, @empId, @shiftId, @firmId)", fromDateParameter, toDateParameter, empIdParameter, shiftIdParameter, firmIdParameter);
        }
    
        [DbFunction("dbContainer", "monthDates")]
        public virtual IQueryable<Nullable<System.DateTime>> monthDates(Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<System.DateTime>>("[dbContainer].[monthDates](@startdate, @enddate)", startdateParameter, enddateParameter);
        }
    
        public virtual ObjectResult<LeaveBalanceReport_Result> LeaveBalanceReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LeaveBalanceReport_Result>("LeaveBalanceReport");
        }
    
        public virtual ObjectResult<MachineData_Result> MachineData(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> empId, Nullable<int> firmId, string attendaceMode)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("empId", empId) :
                new ObjectParameter("empId", typeof(int));
    
            var firmIdParameter = firmId.HasValue ?
                new ObjectParameter("firmId", firmId) :
                new ObjectParameter("firmId", typeof(int));
    
            var attendaceModeParameter = attendaceMode != null ?
                new ObjectParameter("attendaceMode", attendaceMode) :
                new ObjectParameter("attendaceMode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MachineData_Result>("MachineData", startDateParameter, endDateParameter, empIdParameter, firmIdParameter, attendaceModeParameter);
        }
    
        public virtual ObjectResult<GetAllTraining_Result> GetAllTraining(Nullable<int> firmid)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTraining_Result>("GetAllTraining", firmidParameter);
        }
    
        [DbFunction("dbContainer", "GetAttendanceShiftWiseIndividuallynew1")]
        public virtual IQueryable<GetAttendanceShiftWiseIndividuallynew1_Result> GetAttendanceShiftWiseIndividuallynew1(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> empId, Nullable<int> firmId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("empId", empId) :
                new ObjectParameter("empId", typeof(int));
    
            var firmIdParameter = firmId.HasValue ?
                new ObjectParameter("firmId", firmId) :
                new ObjectParameter("firmId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAttendanceShiftWiseIndividuallynew1_Result>("[dbContainer].[GetAttendanceShiftWiseIndividuallynew1](@fromDate, @toDate, @empId, @firmId)", fromDateParameter, toDateParameter, empIdParameter, firmIdParameter);
        }
    
        public virtual ObjectResult<GetAllDepartmentwiseCount_Result> GetAllDepartmentwiseCount(Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<int> firmid)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllDepartmentwiseCount_Result>("GetAllDepartmentwiseCount", startdateParameter, enddateParameter, firmidParameter);
        }
    
        public virtual ObjectResult<GetAllManHrsTarget_Result> GetAllManHrsTarget(Nullable<int> month, Nullable<int> year, Nullable<int> firmId)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var firmIdParameter = firmId.HasValue ?
                new ObjectParameter("firmId", firmId) :
                new ObjectParameter("firmId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllManHrsTarget_Result>("GetAllManHrsTarget", monthParameter, yearParameter, firmIdParameter);
        }
    
        public virtual ObjectResult<GetEmpoyeeRatingReport_Result> GetEmpoyeeRatingReport(Nullable<int> empid)
        {
            var empidParameter = empid.HasValue ?
                new ObjectParameter("empid", empid) :
                new ObjectParameter("empid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmpoyeeRatingReport_Result>("GetEmpoyeeRatingReport", empidParameter);
        }
    
        public virtual ObjectResult<GetEmpoyeeRatingReportForHr_Result> GetEmpoyeeRatingReportForHr(Nullable<int> empid, Nullable<int> evaluteid)
        {
            var empidParameter = empid.HasValue ?
                new ObjectParameter("empid", empid) :
                new ObjectParameter("empid", typeof(int));
    
            var evaluteidParameter = evaluteid.HasValue ?
                new ObjectParameter("evaluteid", evaluteid) :
                new ObjectParameter("evaluteid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmpoyeeRatingReportForHr_Result>("GetEmpoyeeRatingReportForHr", empidParameter, evaluteidParameter);
        }
    
        public virtual ObjectResult<GetEmpQuestionList_Result> GetEmpQuestionList(Nullable<int> empid)
        {
            var empidParameter = empid.HasValue ?
                new ObjectParameter("empid", empid) :
                new ObjectParameter("empid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmpQuestionList_Result>("GetEmpQuestionList", empidParameter);
        }
    
        public virtual ObjectResult<GetQuestionRatingEvaluator_Result> GetQuestionRatingEvaluator(Nullable<int> empid, Nullable<int> evaluatorId)
        {
            var empidParameter = empid.HasValue ?
                new ObjectParameter("empid", empid) :
                new ObjectParameter("empid", typeof(int));
    
            var evaluatorIdParameter = evaluatorId.HasValue ?
                new ObjectParameter("evaluatorId", evaluatorId) :
                new ObjectParameter("evaluatorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetQuestionRatingEvaluator_Result>("GetQuestionRatingEvaluator", empidParameter, evaluatorIdParameter);
        }
    
        public virtual ObjectResult<GetMonthlyTrainingReport1_Result> GetMonthlyTrainingReport1(Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<int> firmid)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMonthlyTrainingReport1_Result>("GetMonthlyTrainingReport1", startdateParameter, enddateParameter, firmidParameter);
        }
    
        public virtual ObjectResult<GetUpdatedEmpQuestionList_Result> GetUpdatedEmpQuestionList(Nullable<int> empid)
        {
            var empidParameter = empid.HasValue ?
                new ObjectParameter("empid", empid) :
                new ObjectParameter("empid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUpdatedEmpQuestionList_Result>("GetUpdatedEmpQuestionList", empidParameter);
        }
    
        public virtual ObjectResult<AsignRoleEmpReport_Result> AsignRoleEmpReport(Nullable<int> firmid)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AsignRoleEmpReport_Result>("AsignRoleEmpReport", firmidParameter);
        }
    
        public virtual ObjectResult<GetRatingAllEmployee_Result> GetRatingAllEmployee(Nullable<int> firmid, Nullable<int> empid, Nullable<int> evaluatorid)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            var empidParameter = empid.HasValue ?
                new ObjectParameter("empid", empid) :
                new ObjectParameter("empid", typeof(int));
    
            var evaluatoridParameter = evaluatorid.HasValue ?
                new ObjectParameter("evaluatorid", evaluatorid) :
                new ObjectParameter("evaluatorid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRatingAllEmployee_Result>("GetRatingAllEmployee", firmidParameter, empidParameter, evaluatoridParameter);
        }
    
        public virtual ObjectResult<LeaverequestListForMgr_Result> LeaverequestListForMgr(Nullable<int> reportingid, Nullable<int> firmId, Nullable<int> empid, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var reportingidParameter = reportingid.HasValue ?
                new ObjectParameter("reportingid", reportingid) :
                new ObjectParameter("reportingid", typeof(int));
    
            var firmIdParameter = firmId.HasValue ?
                new ObjectParameter("firmId", firmId) :
                new ObjectParameter("firmId", typeof(int));
    
            var empidParameter = empid.HasValue ?
                new ObjectParameter("empid", empid) :
                new ObjectParameter("empid", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LeaverequestListForMgr_Result>("LeaverequestListForMgr", reportingidParameter, firmIdParameter, empidParameter, fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<AttendanceRequestListForMgr_Result> AttendanceRequestListForMgr(Nullable<int> reportingid, Nullable<int> firmId, Nullable<int> empid, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var reportingidParameter = reportingid.HasValue ?
                new ObjectParameter("reportingid", reportingid) :
                new ObjectParameter("reportingid", typeof(int));
    
            var firmIdParameter = firmId.HasValue ?
                new ObjectParameter("firmId", firmId) :
                new ObjectParameter("firmId", typeof(int));
    
            var empidParameter = empid.HasValue ?
                new ObjectParameter("empid", empid) :
                new ObjectParameter("empid", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AttendanceRequestListForMgr_Result>("AttendanceRequestListForMgr", reportingidParameter, firmIdParameter, empidParameter, fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<UpComingAnnivarsoryTenvue_Result> UpComingAnnivarsoryTenvue(Nullable<int> firmid)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpComingAnnivarsoryTenvue_Result>("UpComingAnnivarsoryTenvue", firmidParameter);
        }
    
        public virtual ObjectResult<UpComingBirthday_Result> UpComingBirthday(Nullable<int> firmid)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpComingBirthday_Result>("UpComingBirthday", firmidParameter);
        }
    
        public virtual ObjectResult<UpComingProbation_Result> UpComingProbation(Nullable<int> firmid)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpComingProbation_Result>("UpComingProbation", firmidParameter);
        }
    
        public virtual ObjectResult<StaffDropdownConcate_Result> StaffDropdownConcate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StaffDropdownConcate_Result>("StaffDropdownConcate");
        }
    
        public virtual ObjectResult<StaffDropdownList_Result> StaffDropdownList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StaffDropdownList_Result>("StaffDropdownList");
        }
    
        public virtual ObjectResult<FormEvaluatorEmpList_Result> FormEvaluatorEmpList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FormEvaluatorEmpList_Result>("FormEvaluatorEmpList");
        }
    
        public virtual ObjectResult<UserEmailReport_Result> UserEmailReport(Nullable<int> staffid, Nullable<int> firmid)
        {
            var staffidParameter = staffid.HasValue ?
                new ObjectParameter("staffid", staffid) :
                new ObjectParameter("staffid", typeof(int));
    
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserEmailReport_Result>("UserEmailReport", staffidParameter, firmidParameter);
        }
    
        public virtual ObjectResult<GetMonthlyTrainingReport_Result> GetMonthlyTrainingReport(Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<int> firmid)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMonthlyTrainingReport_Result>("GetMonthlyTrainingReport", startdateParameter, enddateParameter, firmidParameter);
        }
    
        public virtual ObjectResult<ManagePermission_Result> ManagePermission(Nullable<int> firmId)
        {
            var firmIdParameter = firmId.HasValue ?
                new ObjectParameter("firmId", firmId) :
                new ObjectParameter("firmId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ManagePermission_Result>("ManagePermission", firmIdParameter);
        }
    
        public virtual ObjectResult<GetAllEmpBankInfo_Result> GetAllEmpBankInfo(Nullable<int> firmid)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllEmpBankInfo_Result>("GetAllEmpBankInfo", firmidParameter);
        }
    
        public virtual ObjectResult<GetAllEmpInsuranceInfo_Result> GetAllEmpInsuranceInfo(Nullable<int> firmid)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllEmpInsuranceInfo_Result>("GetAllEmpInsuranceInfo", firmidParameter);
        }
    
        public virtual ObjectResult<GetAllEmployeeESIDetail_Result> GetAllEmployeeESIDetail(Nullable<int> firmid)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllEmployeeESIDetail_Result>("GetAllEmployeeESIDetail", firmidParameter);
        }
    
        public virtual ObjectResult<GetAllEpfNomineeDetail_Result> GetAllEpfNomineeDetail(Nullable<int> firmid)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllEpfNomineeDetail_Result>("GetAllEpfNomineeDetail", firmidParameter);
        }
    
        public virtual ObjectResult<GetVisaPassportDetails_Result> GetVisaPassportDetails(Nullable<int> firmid)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVisaPassportDetails_Result>("GetVisaPassportDetails", firmidParameter);
        }
    
        public virtual ObjectResult<GetAllTrainingByEmp_Result> GetAllTrainingByEmp(Nullable<int> firmid, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTrainingByEmp_Result>("GetAllTrainingByEmp", firmidParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<EmployeeLeaveBucketNew_Result> EmployeeLeaveBucketNew(Nullable<int> staffid, Nullable<int> firmId, Nullable<int> dept)
        {
            var staffidParameter = staffid.HasValue ?
                new ObjectParameter("Staffid", staffid) :
                new ObjectParameter("Staffid", typeof(int));
    
            var firmIdParameter = firmId.HasValue ?
                new ObjectParameter("FirmId", firmId) :
                new ObjectParameter("FirmId", typeof(int));
    
            var deptParameter = dept.HasValue ?
                new ObjectParameter("dept", dept) :
                new ObjectParameter("dept", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeLeaveBucketNew_Result>("EmployeeLeaveBucketNew", staffidParameter, firmIdParameter, deptParameter);
        }
    
        public virtual ObjectResult<LeavesheetAllEmp_Result> LeavesheetAllEmp(Nullable<int> firmid)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LeavesheetAllEmp_Result>("LeavesheetAllEmp", firmidParameter);
        }
    
        [DbFunction("dbContainer", "Workloadtime")]
        public virtual IQueryable<Nullable<int>> Workloadtime(Nullable<int> shiftid, Nullable<int> firmid)
        {
            var shiftidParameter = shiftid.HasValue ?
                new ObjectParameter("shiftid", shiftid) :
                new ObjectParameter("shiftid", typeof(int));
    
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<int>>("[dbContainer].[Workloadtime](@shiftid, @firmid)", shiftidParameter, firmidParameter);
        }
    
        public virtual ObjectResult<NetDurationAllEmp_Result> NetDurationAllEmp(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> firmId, Nullable<int> staffid)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var firmIdParameter = firmId.HasValue ?
                new ObjectParameter("firmId", firmId) :
                new ObjectParameter("firmId", typeof(int));
    
            var staffidParameter = staffid.HasValue ?
                new ObjectParameter("staffid", staffid) :
                new ObjectParameter("staffid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NetDurationAllEmp_Result>("NetDurationAllEmp", fromDateParameter, toDateParameter, firmIdParameter, staffidParameter);
        }
    
        public virtual ObjectResult<Brekingshift_Result> Brekingshift(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> firmId, Nullable<int> staffid)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var firmIdParameter = firmId.HasValue ?
                new ObjectParameter("firmId", firmId) :
                new ObjectParameter("firmId", typeof(int));
    
            var staffidParameter = staffid.HasValue ?
                new ObjectParameter("staffid", staffid) :
                new ObjectParameter("staffid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Brekingshift_Result>("Brekingshift", fromDateParameter, toDateParameter, firmIdParameter, staffidParameter);
        }
    
        public virtual ObjectResult<AllAttendaceEntry_Result> AllAttendaceEntry(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> firmId, Nullable<int> staffId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var firmIdParameter = firmId.HasValue ?
                new ObjectParameter("FirmId", firmId) :
                new ObjectParameter("FirmId", typeof(int));
    
            var staffIdParameter = staffId.HasValue ?
                new ObjectParameter("staffId", staffId) :
                new ObjectParameter("staffId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllAttendaceEntry_Result>("AllAttendaceEntry", fromDateParameter, toDateParameter, firmIdParameter, staffIdParameter);
        }
    
        public virtual ObjectResult<BrekingshiftForMgr_Result> BrekingshiftForMgr(Nullable<int> reportingid, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> firmId, Nullable<int> staffid)
        {
            var reportingidParameter = reportingid.HasValue ?
                new ObjectParameter("reportingid", reportingid) :
                new ObjectParameter("reportingid", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var firmIdParameter = firmId.HasValue ?
                new ObjectParameter("firmId", firmId) :
                new ObjectParameter("firmId", typeof(int));
    
            var staffidParameter = staffid.HasValue ?
                new ObjectParameter("staffid", staffid) :
                new ObjectParameter("staffid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrekingshiftForMgr_Result>("BrekingshiftForMgr", reportingidParameter, fromDateParameter, toDateParameter, firmIdParameter, staffidParameter);
        }
    
        public virtual ObjectResult<GetAllNetDuratuionEntryForMgr_Result> GetAllNetDuratuionEntryForMgr(Nullable<int> reportingid, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> firmId, Nullable<int> staffid)
        {
            var reportingidParameter = reportingid.HasValue ?
                new ObjectParameter("reportingid", reportingid) :
                new ObjectParameter("reportingid", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var firmIdParameter = firmId.HasValue ?
                new ObjectParameter("firmId", firmId) :
                new ObjectParameter("firmId", typeof(int));
    
            var staffidParameter = staffid.HasValue ?
                new ObjectParameter("staffid", staffid) :
                new ObjectParameter("staffid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllNetDuratuionEntryForMgr_Result>("GetAllNetDuratuionEntryForMgr", reportingidParameter, fromDateParameter, toDateParameter, firmIdParameter, staffidParameter);
        }
    
        public virtual ObjectResult<GetAllNetDuratuionEntry_Result> GetAllNetDuratuionEntry(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> firmId, Nullable<int> staffid)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var firmIdParameter = firmId.HasValue ?
                new ObjectParameter("firmId", firmId) :
                new ObjectParameter("firmId", typeof(int));
    
            var staffidParameter = staffid.HasValue ?
                new ObjectParameter("staffid", staffid) :
                new ObjectParameter("staffid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllNetDuratuionEntry_Result>("GetAllNetDuratuionEntry", fromDateParameter, toDateParameter, firmIdParameter, staffidParameter);
        }
    
        public virtual ObjectResult<NetDurationAllEmpForMgr_Result> NetDurationAllEmpForMgr(Nullable<int> reporting, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> firmId, Nullable<int> staffid)
        {
            var reportingParameter = reporting.HasValue ?
                new ObjectParameter("reporting", reporting) :
                new ObjectParameter("reporting", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var firmIdParameter = firmId.HasValue ?
                new ObjectParameter("firmId", firmId) :
                new ObjectParameter("firmId", typeof(int));
    
            var staffidParameter = staffid.HasValue ?
                new ObjectParameter("staffid", staffid) :
                new ObjectParameter("staffid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NetDurationAllEmpForMgr_Result>("NetDurationAllEmpForMgr", reportingParameter, fromDateParameter, toDateParameter, firmIdParameter, staffidParameter);
        }
    
        public virtual ObjectResult<LeavesheetAllEmpFromNewTbl_Result> LeavesheetAllEmpFromNewTbl(Nullable<int> firmid)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LeavesheetAllEmpFromNewTbl_Result>("LeavesheetAllEmpFromNewTbl", firmidParameter);
        }
    
        public virtual ObjectResult<EmployeeLeaveBucketFromNewTable_Result> EmployeeLeaveBucketFromNewTable(Nullable<int> staffid, Nullable<int> firmId)
        {
            var staffidParameter = staffid.HasValue ?
                new ObjectParameter("Staffid", staffid) :
                new ObjectParameter("Staffid", typeof(int));
    
            var firmIdParameter = firmId.HasValue ?
                new ObjectParameter("FirmId", firmId) :
                new ObjectParameter("FirmId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeLeaveBucketFromNewTable_Result>("EmployeeLeaveBucketFromNewTable", staffidParameter, firmIdParameter);
        }
    
        public virtual ObjectResult<GetLeaveBalanceFromNewTbl_Result> GetLeaveBalanceFromNewTbl(Nullable<int> staffid, Nullable<int> leavetypeid)
        {
            var staffidParameter = staffid.HasValue ?
                new ObjectParameter("Staffid", staffid) :
                new ObjectParameter("Staffid", typeof(int));
    
            var leavetypeidParameter = leavetypeid.HasValue ?
                new ObjectParameter("Leavetypeid", leavetypeid) :
                new ObjectParameter("Leavetypeid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLeaveBalanceFromNewTbl_Result>("GetLeaveBalanceFromNewTbl", staffidParameter, leavetypeidParameter);
        }
    
        public virtual ObjectResult<NotAssignEmailReporting_Result> NotAssignEmailReporting(Nullable<int> firmid)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NotAssignEmailReporting_Result>("NotAssignEmailReporting", firmidParameter);
        }
    
        public virtual ObjectResult<NotAssignEvaluatorToEmp_Result> NotAssignEvaluatorToEmp(Nullable<int> firmid)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NotAssignEvaluatorToEmp_Result>("NotAssignEvaluatorToEmp", firmidParameter);
        }
    
        public virtual ObjectResult<NotAssignFormToEmp_Result> NotAssignFormToEmp(Nullable<int> firmid)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NotAssignFormToEmp_Result>("NotAssignFormToEmp", firmidParameter);
        }
    
        public virtual ObjectResult<NotAssignMemberMachineConfige_Result> NotAssignMemberMachineConfige(Nullable<int> firmid)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NotAssignMemberMachineConfige_Result>("NotAssignMemberMachineConfige", firmidParameter);
        }
    
        public virtual ObjectResult<NotAssignMemberShift_Result> NotAssignMemberShift(Nullable<int> firmid)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NotAssignMemberShift_Result>("NotAssignMemberShift", firmidParameter);
        }
    
        public virtual ObjectResult<NotAssignQuestionToForm_Result> NotAssignQuestionToForm(Nullable<int> firmid)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NotAssignQuestionToForm_Result>("NotAssignQuestionToForm", firmidParameter);
        }
    
        public virtual ObjectResult<NotAssignUserName_Result> NotAssignUserName(Nullable<int> firmid)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NotAssignUserName_Result>("NotAssignUserName", firmidParameter);
        }
    
        public virtual ObjectResult<NotFillBankInfoToStaff_Result> NotFillBankInfoToStaff(Nullable<int> firmid)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NotFillBankInfoToStaff_Result>("NotFillBankInfoToStaff", firmidParameter);
        }
    
        public virtual ObjectResult<NotFillEPFDetailsToStaff_Result> NotFillEPFDetailsToStaff(Nullable<int> firmid)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NotFillEPFDetailsToStaff_Result>("NotFillEPFDetailsToStaff", firmidParameter);
        }
    
        public virtual ObjectResult<NotFillUpEsiInfoToStaff_Result> NotFillUpEsiInfoToStaff(Nullable<int> firmid)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NotFillUpEsiInfoToStaff_Result>("NotFillUpEsiInfoToStaff", firmidParameter);
        }
    
        public virtual ObjectResult<NotFillUpInsuRanceInfoToStaff_Result> NotFillUpInsuRanceInfoToStaff(Nullable<int> firmid)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NotFillUpInsuRanceInfoToStaff_Result>("NotFillUpInsuRanceInfoToStaff", firmidParameter);
        }
    
        public virtual ObjectResult<NotFillVisaPassportToStaff_Result> NotFillVisaPassportToStaff(Nullable<int> firmid)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NotFillVisaPassportToStaff_Result>("NotFillVisaPassportToStaff", firmidParameter);
        }
    
        public virtual ObjectResult<NotStaffSubmitDocument_Result> NotStaffSubmitDocument(Nullable<int> firmid)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NotStaffSubmitDocument_Result>("NotStaffSubmitDocument", firmidParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetTotalCompansation(Nullable<int> empId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("empId", empId) :
                new ObjectParameter("empId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetTotalCompansation", empIdParameter);
        }
    
        public virtual int GetTotalCompansationnew(Nullable<int> empId, Nullable<System.DateTime> updatedDate)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("empId", empId) :
                new ObjectParameter("empId", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("updatedDate", updatedDate) :
                new ObjectParameter("updatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTotalCompansationnew", empIdParameter, updatedDateParameter);
        }
    
        [DbFunction("dbContainer", "Workloadtimenew")]
        public virtual IQueryable<Nullable<int>> Workloadtimenew(Nullable<int> shiftid, Nullable<int> firmid, Nullable<int> empid)
        {
            var shiftidParameter = shiftid.HasValue ?
                new ObjectParameter("shiftid", shiftid) :
                new ObjectParameter("shiftid", typeof(int));
    
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            var empidParameter = empid.HasValue ?
                new ObjectParameter("empid", empid) :
                new ObjectParameter("empid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<int>>("[dbContainer].[Workloadtimenew](@shiftid, @firmid, @empid)", shiftidParameter, firmidParameter, empidParameter);
        }
    
        public virtual ObjectResult<GetStaffLoginRecord_Result> GetStaffLoginRecord(Nullable<int> firmid, Nullable<System.DateTime> createdDate)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("Firmid", firmid) :
                new ObjectParameter("Firmid", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("createdDate", createdDate) :
                new ObjectParameter("createdDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStaffLoginRecord_Result>("GetStaffLoginRecord", firmidParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<GetStaffLoginRecordNew_Result> GetStaffLoginRecordNew(Nullable<int> firmid, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("Firmid", firmid) :
                new ObjectParameter("Firmid", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStaffLoginRecordNew_Result>("GetStaffLoginRecordNew", firmidParameter, fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<GetStaffLoginDetails_Result> GetStaffLoginDetails(Nullable<int> loginId)
        {
            var loginIdParameter = loginId.HasValue ?
                new ObjectParameter("LoginId", loginId) :
                new ObjectParameter("LoginId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStaffLoginDetails_Result>("GetStaffLoginDetails", loginIdParameter);
        }
    
        public virtual ObjectResult<GetStaffLoginDetailsMember_Result> GetStaffLoginDetailsMember(Nullable<int> staffid, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var staffidParameter = staffid.HasValue ?
                new ObjectParameter("staffid", staffid) :
                new ObjectParameter("staffid", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStaffLoginDetailsMember_Result>("GetStaffLoginDetailsMember", staffidParameter, fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<QuestionAssignFormDropdownList_Result> QuestionAssignFormDropdownList(Nullable<int> firmid)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<QuestionAssignFormDropdownList_Result>("QuestionAssignFormDropdownList", firmidParameter);
        }
    
        public virtual ObjectResult<NoticeCalendar_Result> NoticeCalendar(Nullable<int> firmid)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NoticeCalendar_Result>("NoticeCalendar", firmidParameter);
        }
    
        public virtual ObjectResult<TotalAnniversaryTenureInYear_Result> TotalAnniversaryTenureInYear(Nullable<int> firmid)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TotalAnniversaryTenureInYear_Result>("TotalAnniversaryTenureInYear", firmidParameter);
        }
    
        public virtual ObjectResult<TotalBirthdayInYear_Result> TotalBirthdayInYear(Nullable<int> firmid)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TotalBirthdayInYear_Result>("TotalBirthdayInYear", firmidParameter);
        }
    
        public virtual ObjectResult<TotalProhibitionInYear_Result> TotalProhibitionInYear(Nullable<int> firmid)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TotalProhibitionInYear_Result>("TotalProhibitionInYear", firmidParameter);
        }
    
        public virtual ObjectResult<GetAttendance_Result> GetAttendance(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> firmId, Nullable<int> deptId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var firmIdParameter = firmId.HasValue ?
                new ObjectParameter("firmId", firmId) :
                new ObjectParameter("firmId", typeof(int));
    
            var deptIdParameter = deptId.HasValue ?
                new ObjectParameter("deptId", deptId) :
                new ObjectParameter("deptId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAttendance_Result>("GetAttendance", fromDateParameter, toDateParameter, firmIdParameter, deptIdParameter);
        }
    
        public virtual ObjectResult<MachineDataDepartmentWise_Result> MachineDataDepartmentWise(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> firmId, string attendaceMode, Nullable<int> deptId)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var firmIdParameter = firmId.HasValue ?
                new ObjectParameter("firmId", firmId) :
                new ObjectParameter("firmId", typeof(int));
    
            var attendaceModeParameter = attendaceMode != null ?
                new ObjectParameter("attendaceMode", attendaceMode) :
                new ObjectParameter("attendaceMode", typeof(string));
    
            var deptIdParameter = deptId.HasValue ?
                new ObjectParameter("deptId", deptId) :
                new ObjectParameter("deptId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MachineDataDepartmentWise_Result>("MachineDataDepartmentWise", startDateParameter, endDateParameter, firmIdParameter, attendaceModeParameter, deptIdParameter);
        }
    
        public virtual ObjectResult<MachineDatanew_Result> MachineDatanew(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> empId, Nullable<int> firmId, string attendaceMode)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("empId", empId) :
                new ObjectParameter("empId", typeof(int));
    
            var firmIdParameter = firmId.HasValue ?
                new ObjectParameter("firmId", firmId) :
                new ObjectParameter("firmId", typeof(int));
    
            var attendaceModeParameter = attendaceMode != null ?
                new ObjectParameter("attendaceMode", attendaceMode) :
                new ObjectParameter("attendaceMode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MachineDatanew_Result>("MachineDatanew", startDateParameter, endDateParameter, empIdParameter, firmIdParameter, attendaceModeParameter);
        }
    
        public virtual ObjectResult<PreSalaryReport_Result> PreSalaryReport(Nullable<int> month, Nullable<int> year, Nullable<int> firmId)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var firmIdParameter = firmId.HasValue ?
                new ObjectParameter("FirmId", firmId) :
                new ObjectParameter("FirmId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PreSalaryReport_Result>("PreSalaryReport", monthParameter, yearParameter, firmIdParameter);
        }
    
        public virtual int SalaryUpdateAndInsertEmployee(Nullable<int> monthlyAttenDetailId, Nullable<int> staffid, Nullable<int> month, Nullable<int> year, Nullable<decimal> absenceAmt, Nullable<int> ctcIds, Nullable<decimal> paybleDays, Nullable<decimal> netAmounts, Nullable<decimal> allowanceCredits, Nullable<decimal> allowanceDebits, Nullable<decimal> totalEarnings, Nullable<decimal> deductionAmounts, Nullable<decimal> overtimes, Nullable<decimal> undertimes, Nullable<int> firmid, string generatedBy)
        {
            var monthlyAttenDetailIdParameter = monthlyAttenDetailId.HasValue ?
                new ObjectParameter("monthlyAttenDetailId", monthlyAttenDetailId) :
                new ObjectParameter("monthlyAttenDetailId", typeof(int));
    
            var staffidParameter = staffid.HasValue ?
                new ObjectParameter("staffid", staffid) :
                new ObjectParameter("staffid", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var absenceAmtParameter = absenceAmt.HasValue ?
                new ObjectParameter("absenceAmt", absenceAmt) :
                new ObjectParameter("absenceAmt", typeof(decimal));
    
            var ctcIdsParameter = ctcIds.HasValue ?
                new ObjectParameter("ctcIds", ctcIds) :
                new ObjectParameter("ctcIds", typeof(int));
    
            var paybleDaysParameter = paybleDays.HasValue ?
                new ObjectParameter("paybleDays", paybleDays) :
                new ObjectParameter("paybleDays", typeof(decimal));
    
            var netAmountsParameter = netAmounts.HasValue ?
                new ObjectParameter("NetAmounts", netAmounts) :
                new ObjectParameter("NetAmounts", typeof(decimal));
    
            var allowanceCreditsParameter = allowanceCredits.HasValue ?
                new ObjectParameter("AllowanceCredits", allowanceCredits) :
                new ObjectParameter("AllowanceCredits", typeof(decimal));
    
            var allowanceDebitsParameter = allowanceDebits.HasValue ?
                new ObjectParameter("AllowanceDebits", allowanceDebits) :
                new ObjectParameter("AllowanceDebits", typeof(decimal));
    
            var totalEarningsParameter = totalEarnings.HasValue ?
                new ObjectParameter("TotalEarnings", totalEarnings) :
                new ObjectParameter("TotalEarnings", typeof(decimal));
    
            var deductionAmountsParameter = deductionAmounts.HasValue ?
                new ObjectParameter("DeductionAmounts", deductionAmounts) :
                new ObjectParameter("DeductionAmounts", typeof(decimal));
    
            var overtimesParameter = overtimes.HasValue ?
                new ObjectParameter("Overtimes", overtimes) :
                new ObjectParameter("Overtimes", typeof(decimal));
    
            var undertimesParameter = undertimes.HasValue ?
                new ObjectParameter("Undertimes", undertimes) :
                new ObjectParameter("Undertimes", typeof(decimal));
    
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            var generatedByParameter = generatedBy != null ?
                new ObjectParameter("generatedBy", generatedBy) :
                new ObjectParameter("generatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SalaryUpdateAndInsertEmployee", monthlyAttenDetailIdParameter, staffidParameter, monthParameter, yearParameter, absenceAmtParameter, ctcIdsParameter, paybleDaysParameter, netAmountsParameter, allowanceCreditsParameter, allowanceDebitsParameter, totalEarningsParameter, deductionAmountsParameter, overtimesParameter, undertimesParameter, firmidParameter, generatedByParameter);
        }
    
        public virtual ObjectResult<GetPaySlip_Result> GetPaySlip(Nullable<int> month, Nullable<int> year, Nullable<int> staffId)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var staffIdParameter = staffId.HasValue ?
                new ObjectParameter("staffId", staffId) :
                new ObjectParameter("staffId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPaySlip_Result>("GetPaySlip", monthParameter, yearParameter, staffIdParameter);
        }
    
        public virtual int RepliacatePayheads(Nullable<int> variableId, Nullable<int> structureid, Nullable<int> firmid)
        {
            var variableIdParameter = variableId.HasValue ?
                new ObjectParameter("variableId", variableId) :
                new ObjectParameter("variableId", typeof(int));
    
            var structureidParameter = structureid.HasValue ?
                new ObjectParameter("Structureid", structureid) :
                new ObjectParameter("Structureid", typeof(int));
    
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RepliacatePayheads", variableIdParameter, structureidParameter, firmidParameter);
        }
    
        public virtual ObjectResult<GetPayheadList_Result> GetPayheadList(Nullable<int> firmid)
        {
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayheadList_Result>("GetPayheadList", firmidParameter);
        }
    
        public virtual ObjectResult<OvertimeSetting_Result> OvertimeSetting(Nullable<int> firmId)
        {
            var firmIdParameter = firmId.HasValue ?
                new ObjectParameter("FirmId", firmId) :
                new ObjectParameter("FirmId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OvertimeSetting_Result>("OvertimeSetting", firmIdParameter);
        }
    
        public virtual ObjectResult<SalarySheetHorizontal_Result> SalarySheetHorizontal(Nullable<int> month, Nullable<int> year, Nullable<int> firmid)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var firmidParameter = firmid.HasValue ?
                new ObjectParameter("firmid", firmid) :
                new ObjectParameter("firmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SalarySheetHorizontal_Result>("SalarySheetHorizontal", monthParameter, yearParameter, firmidParameter);
        }
    }
}
