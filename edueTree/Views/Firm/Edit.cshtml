@model edueTree.Models.FirmInfo



@{
    var activeList = new SelectList(new[]
    {
        new SelectListItem {Text = "Active", Value = true.ToString()},
        new SelectListItem {Text = "Inactive", Value = false.ToString()},

    }, "Value", "Text");
}

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<section class="content-header">
    <h1>
        @*Edit Firm Info*@
        <small></small>
    </h1>
    <ol class="breadcrumb">
        <li><a href="#"><i class="fa fa-dashboard"></i> Firm</a></li>
        <li class="active">Edit>
    </ol>
</section>

<section class="content">
    <div class="row">
        <section class="col-md-12">
            <div class="box box-success">
                <div class="box-header">
                    <i class="fa fa-calendar-plus-o"></i>
                    <h3 class="box-title">Update Firm Info</h3>

                </div>
                <div class="box-body chat" id="chat-box">
                    <div class="item">
                        @using (Html.BeginForm("Edit", "Firm", null, FormMethod.Post, new {enctype = "multipart/form-data"}))
                        {
                            @Html.AntiForgeryToken()

                            <div class="form-horizontal" id="defaultForm">

                                @Html.ValidationSummary(true)
                                @Html.HiddenFor(model => model.firmId)
                                @Html.HiddenFor(model => model.logo)
                                <div class="form-group">
                                    @Html.Label("Firm Name:", new {@class = "control-label col-md-3"})
                                    <div class="col-md-9">
                                        @Html.TextBoxFor(model => model.firmName, new {id = "firmName", @class = "form-control", placeholder = "enter firm name", @readonly = "readonly"})
                                        @Html.ValidationMessageFor(model => model.firmName)
                                        <span class="help-block" id="FirmNameMessage" />
                                    </div>
                                </div>


                                <div class="form-group">
                                    @Html.Label("Firm Logo:", new {@class = "control-label col-md-3"})
                                    <div class="col-md-9">
                                        <img src="~/FirmLogo/@Model.logo" width="180" class="img-thumbnail"/>
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.Label("Address:", new {@class = "control-label col-md-3"})
                                    <div class="col-md-9">
                                        @Html.TextBoxFor(model => model.flatNo, new {id = "FlatNo", @class = "form-control", placeholder = "enter flat No", @readonly = "readonly"})
                                        @Html.ValidationMessageFor(model => model.flatNo)
                                        <span class="help-block" id="FlatNoMessage" />
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.street, new {@class = "control-label col-md-3"})
                                    <div class="col-md-9">
                                        @Html.TextBoxFor(model => model.street, new {id = "Street", @class = "form-control", placeholder = "enter street", @readonly = "readonly"})
                                        @Html.ValidationMessageFor(model => model.street)
                                        <span class="help-block" id="StreetMessage" />
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.area, new {@class = "control-label col-md-3"})
                                    <div class="col-md-9">
                                        @Html.TextBoxFor(model => model.area, new {id = "Area", @class = "form-control", placeholder = "enter area", @readonly = "readonly"})
                                        @Html.ValidationMessageFor(model => model.area)
                                        <span class="help-block" id="AreaMessage" />
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.city, new {@class = "control-label col-md-3"})
                                    <div class="col-md-9">
                                        @Html.TextBoxFor(model => model.city, new {id = "City", @class = "form-control", placeholder = "enter city", @readonly = "readonly"})
                                        @Html.ValidationMessageFor(model => model.city)
                                        <span class="help-block" id="CityMessage" />
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.state, new {@class = "control-label col-md-3"})
                                    <div class="col-md-9">
                                        @Html.TextBoxFor(model => model.state, new {id = "State", @class = "form-control", placeholder = "enter state", @readonly = "readonly"})
                                        @Html.ValidationMessageFor(model => model.state)
                                        <span class="help-block" id="StateMessage" />
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.pincode, new {@class = "control-label col-md-3"})
                                    <div class="col-md-9">
                                        @Html.TextBoxFor(model => model.pincode, new {id = "pincode", @class = "form-control", placeholder = "enter pincode", @readonly = "readonly"})
                                        @Html.ValidationMessageFor(model => model.pincode)
                                        <span class="help-block" id="pincodeMessage" />
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.contact, new {@class = "control-label col-md-3"})
                                    <div class="col-md-9">
                                        @Html.TextBoxFor(model => model.contact, new {id = "contact", @class = "form-control", placeholder = "enter contact number", @readonly = "readonly"}) @Html.ValidationMessageFor(model => model.contact)
                                        <span class="help-block" id="ContactMessage" />
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.email, new {@class = "control-label col-md-3"})
                                    <div class="col-md-9">
                                        @Html.TextBoxFor(model => model.email, new {id = "email", @class = "form-control", placeholder = "enter email", @readonly = "readonly"})
                                        @Html.ValidationMessageFor(model => model.email)
                                        <span class="help-block" id="EmailMessage" />
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.fax, new {@class = "control-label col-md-3"})
                                    <div class="col-md-9">
                                        @Html.TextBoxFor(model => model.fax, new {id = "Fax", @class = "form-control", placeholder = "enter fax number", @readonly = "readonly"})
                                        <span class="help-block" id="FaxMessage" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.Label("Status:", new {@class = "control-label col-md-3"})
                                    <div class="col-md-9">
                                        @Html.DropDownListFor(model => model.isActive, activeList, new {id = "", @class = "form-control"})
                                        @Html.ValidationMessageFor(model => model.isActive)
                                    </div>
                                </div>
                                @*<div class="form-group">
                                    @Html.LabelFor(model => model.website, new { @class = "control-label col-md-3" })
                                    <div class="col-md-9">
                                        @Html.TextBoxFor(model => model.website, new { id = "website", @class = "form-control", placeholder = "enter website" })
                                        <span class="help-block" id="WebsiteMessage" />
                                    </div>
                                </div>*@
                                <hr/>

                                <div class="form-group">
                                    <div class="col-md-offset-3 col-md-9">
                                        <input type="submit" value="Save Changes" class="btn btn-default"/>
                                        <a href='@Url.Action("Index")' class="btn btn-default"> Back to list</a>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </section>
    </div>
</section>

<script type="text/javascript">
    $.noConflict();
    jQuery(document).ready(function() {
        if (true) {
            if ('@TempData["notice"]' === "success") {
                $.notify(" Record Inserted  Successfully ! ", "success");
            }
            if ('@TempData["notice"]' === "update") {
                $.notify(" Record Updated  Successfully ! ", "success");
            }
            if ('@TempData["notice"]' === "exist") {
                $.notify(" Record Already Exist ! ", "warn");
            }
            if ('@TempData["notice"]' === "delete") {
                $.notify(" Record Deleted Successfully ! ", "success");
            }
            if ('@TempData["notice"]' === "cantdelete") {
                $.notify(" Can't delete, because this used some where. ! ", "warn");
            }
        }

    });
</script>
<script type="text/javascript">
    document.getElementById("files").onchange = function () {
        var reader = new FileReader();

        reader.onload = function (e) {
            document.getElementById("image").src = e.target.result;
        };
        reader.readAsDataURL(this.files[0]);
    };


    //$(document).ready(function () {
    //    $("#firmName").focus();
    //    $("#defaultForm").bootstrapValidator({
    //        message: "This value is not valid",
    //        feedbackIcons: {
    //            valid: "glyphicon glyphicon-ok",
    //            invalid: "glyphicon glyphicon-remove",
    //            validating: "glyphicon glyphicon-refresh"
    //        },
    //        fields: {
    //            firmName: {
    //                container: "#FirmNameMessage",
    //                validators: {
    //                    notEmpty: {
    //                        message: "The firm name is required and cannot be empty"
    //                    }
    //                }
    //            },

    //            FlatNo: {
    //                container: "#FlatNoMessage",
    //                validators: {
    //                    notEmpty: {
    //                        message: "The flat no is required and cannot be empty"
    //                    }
    //                }
    //            },

    //            Street: {
    //                container: "#StreetMessage",
    //                validators: {
    //                    notEmpty: {
    //                        message: "The street is required and cannot be empty"
    //                    }
    //                }
    //            },

    //            Area: {
    //                container: "#AreaMessage",
    //                validators: {
    //                    notEmpty: {
    //                        message: "The area is required and cannot be empty"
    //                    }
    //                }
    //            },

    //            City: {
    //                container: "#CityMessage",
    //                validators: {
    //                    notEmpty: {
    //                        message: "The city is required and cannot be empty"
    //                    }
    //                }
    //            },
    //            State: {
    //                container: "#StateMessage",
    //                validators: {
    //                    notEmpty: {
    //                        message: "The state is required and cannot be empty"
    //                    }
    //                }
    //            },
    //            pincode: {
    //                container: "#pincodeMessage",
    //                validators: {
    //                    notEmpty: {
    //                        message: "The pin code is required and cannot be empty"
    //                    },
    //                    digits: {
    //                        message: 'The value can contain only digits'
    //                    },
    //                    regexp: {
    //                        regexp: /^([0][1-9]|[1-6])(\d{5})$/,
    //                        message: 'The input is not a valid pin code'
    //                    }
    //                }
    //            },
    //            Contact: {
    //                container: "#ContactMessage",
    //                validators: {
    //                    notEmpty: {
    //                        message: "The contact is required and cannot be empty"
    //                    },
    //                    digits: {
    //                        message: 'The value can contain only digits'
    //                    }
    //                }
    //            },

    //            Email: {
    //                validators: {
    //                    emailAddress: {
    //                        message: 'The input is not a valid email address'
    //                    }
    //                }
    //            },
    //            Fax: {
    //                validators: {
    //                    blank: {
    //                        message: 'entered fax number '
    //                    }
    //                }
    //            },
    //            Website: {
    //                validators: {
    //                    blank: {
    //                        message: 'entered website '
    //                    }
    //                }
    //            },
    //        }
    //    });
    //});
</script>