@model edueTree.Models.VariableSettingModel

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<link href="~/plugins/select2/select2.min.css" rel="stylesheet" />
<script src="~/plugins/select2/select2.js"></script>

@{    var aboutsite = new SelectList(new[]
        {
            //new SelectListItem { Value = null , Text =  "Select Slabtype"},
            new SelectListItem {Text = "Value", Value = "true"},
            new SelectListItem {Text = "Percentage", Value = "false"},
        }, "Value", "Text");
}


<style type="text/css">
    .help-block {
        color: #ff0000;
    }

    .has-feedback .form-control {
        padding-right: 0.5px;
    }

    .col-md-1 {
        width: 0.333%;
    }
</style>

<style type="text/css">
    .custom-tablePopup th {
        background: #3c8dbc !important;
        text-align: left;
        border-left: 1px solid #bebebe;
        border-bottom: 1px solid #bebebe;
        padding: 5px 8px;
        color: #fff;
    }
</style>

<script type="text/javascript">
    $('body').on('focus', ".usedatepicker", function () {
        $(this).datepicker();
    });
    var count = "1";
    function addRow(in_tbl_name) {

        var tbody = document.getElementById(in_tbl_name).getElementsByTagName("TBODY")[0];
        // create row
        var row = document.createElement("TR");
        var tdNew = document.createElement("TD");       
        var strHtml23 = "<input type=\"hidden\" name=\"FormulaId\"  class=\"form-control \"/>";
        tdNew.innerHTML = strHtml23.replace(/!count!/g, count);

        // create table cell 2
        var td1 = document.createElement("TD");
        var strHtml2 = "<input type=\"text\" name=\"effectivefrom\"  maxlength=\"30\"  class=\"form-control usedatepicker\" />";
        //var strHtml2 = "<input type=\"text\" name=\"effectivefrom\"  maxlength=\"30\"  class=\"form-control\" readonly=\"readonly\"/>";

        td1.innerHTML = strHtml2.replace(/!count!/g, count);
        // create table cell 3
        var td2 = document.createElement("TD");
        var strHtml3 = "<input type=\"text\" name=\"fromamount\"  maxlength=\"30\" class=\"form-control onlynumberval\" />";
        td2.innerHTML = strHtml3.replace(/!count!/g, count);
        // create table cell 4
        var td3 = document.createElement("TD");
        var strHtml4 = "<input type=\"text\" name=\"amountupto\" maxlength=\"30\" class=\"form-control onlynumberval\" />";
        td3.innerHTML = strHtml4.replace(/!count!/g, count);

        // create table cell 4
        var td5 = document.createElement("TD");
        var strHtml7 = "<select class=\"select form-control\" name=\"Formulaslabtype\"><option value=\"0\">select</option><option value=\"true\">Value</option><option value=\"false\">percentage</option></select>";
        //var strHtml7 = "<input type=\"text\" name=\"Slabtype\" maxlength=\"30\" class=\"form-control\" />";
        td5.innerHTML = strHtml7.replace(/!count!/g, count);

        // create table cell 4
        var td6 = document.createElement("TD");
        var strHtml6 = "<input type=\"text\" name=\"valuebasis\" class=\"form-control\"  maxlength=\"30\" />";
        td6.innerHTML = strHtml6.replace(/!count!/g, count);

        // create table cell 5
        var td4 = document.createElement("TD");
        var strHtml5 = "<img src=\"/Images/icon_03.png\" onclick=\"delRow()\" style=\"width: 22px; cursor:pointer;\" />";
        td4.innerHTML = strHtml5.replace(/!count!/g, count);
        // append data to row
        row.appendChild(tdNew);
        row.appendChild(td1);
        row.appendChild(td2);
        row.appendChild(td3);
        row.appendChild(td5);
        row.appendChild(td6);
        row.appendChild(td4);
        count = parseInt(count) + 1;
        // add to count variable
        // append row to table
        tbody.appendChild(row);
    }

    function delRow(id) {

        $.ajax({
            type: "POST",
            url: '@Url.Action("DeleteSpeciFormulaHead")',
            dataType: "json",
            data: { grtspid: id },
            success: function () {
                alert('Successfully deleted.');
            },
        });

        var current = window.event.srcElement;
        //here we will delete the line
        while ((current = current.parentElement) && current.tagName !== "TR");
        current.parentElement.removeChild(current);
    }
</script>

<script type="text/javascript">
    var count = "1";
    function addRow1(in_tbl_name) {
        var tbody = document.getElementById(in_tbl_name).getElementsByTagName("TBODY")[0];
        // create row
        var row = document.createElement("TR");

        var tdNew = document.createElement("TD");
        var strHtml23 = "<input type=\"hidden\" name=\"gratuityid\"  class=\"form-control \"/>";
        tdNew.innerHTML = strHtml23.replace(/!count!/g, count);

        // create table cell 2
        var td1 = document.createElement("TD");
        var strHtml2 = "<input type=\"text\" name=\"fromMonthGratuity\"  maxlength=\"30\"  class=\"form-control onlynumberval\"/>";
        td1.innerHTML = strHtml2.replace(/!count!/g, count);
        // create table cell 3
        var td2 = document.createElement("TD");
        var strHtml3 = "<input type=\"text\" name=\"toMonthGratuity\"  maxlength=\"30\" class=\"form-control onlynumberval\" />";
        td2.innerHTML = strHtml3.replace(/!count!/g, count);
        // create table cell 4
        var td3 = document.createElement("TD");
        var strHtml4 = "<input type=\"text\" name=\"eligibleDaysGratuity\" maxlength=\"30\" class=\"form-control onlynumberval\" />";
        td3.innerHTML = strHtml4.replace(/!count!/g, count);

        // create table cell 5
        var td4 = document.createElement("TD");
        var strHtml5 = "<img src=\"/Images/icon_03.png\" onclick=\"delRow()\" style=\"width: 22px; cursor:pointer;\" />";
        td4.innerHTML = strHtml5.replace(/!count!/g, count);
        // append data to row

        row.appendChild(tdNew);
        row.appendChild(td1);
        row.appendChild(td2);
        row.appendChild(td3);
        row.appendChild(td4);
        count = parseInt(count) + 1;
        // add to count variable
        // append row to table
        tbody.appendChild(row);
    }

    function delRow1(id) {
              
        $.ajax({
            type: "POST",
            url: '@Url.Action("DeleteGratuityHead")',                        
            dataType: "json",
            data: { grtid: id },
            success: function() {
                 alert('Successfully deleted.');
            },           
        });

       var current = window.event.srcElement;       
       while ((current = current.parentElement) && current.tagName !== "TR");
       current.parentElement.removeChild(current);

    }
</script>

<script type="text/javascript">
    function OnChangeFuncation(e) {
        jQuery.ajax({
            type: "POST",
            url: "/VariableSettings/GetVariableInfo",
            data: { deptId: e.value },
            datatype: "json",
            error:
                function () {
                    alert("Please select proper");
                    $("#CalculateFrom1").prop("disabled", true);
                    $("#CalculateFrom2").prop("disabled", true);
                    //$("#CalculateFrom3").prop("disabled", true);
                },
            success: function (response) {

                var items = "";
                $(response.value).each(function (i, item) {
                    items += "<option value=\"" + item + "\">" + response.text[i] + "</option>";
                });

                $("#CalculateFrom1").html(items);
                $("#CalculateFrom1").prop("disabled", false);

                $("#CalculateFrom2").html(items);
                $("#CalculateFrom2").prop("disabled", false);

                //$("#CalculateFrom3").html(items);
                //$("#CalculateFrom3").prop("disabled", false);
            }
        });
    };
</script>

<section class="content-header">
    <h1>
        <small></small>
    </h1>
    <ol class="breadcrumb">
        <li><a href="#"><i class="fa fa-dashboard"></i> Pay head Creation</a></li>
        <li class="active">Add</li>
    </ol>
</section>

<section class="content">
    <div class="row">
        <section class="col-md-12">
            @using (Html.BeginForm("EditVariable", "VariableSettings", FormMethod.Post, new { id = "form" }))
            {
                <div class="box box-success">
                    <div class="box-header">
                        <i class="fa fa-calendar-plus-o"></i>
                        <h3 class="box-title">Pay Head Creation</h3>
                    </div>
                    <div class="box-body">
                        @Html.AntiForgeryToken()
                        <div class="form-horizontal" id="defaultform4">
                            @Html.ValidationSummary(true)
                            @Html.HiddenFor(model => model.VariableId)
                            @Html.HiddenFor(model => model.calculationtype)
                        <div class="col-md-6">
                                <!---Structureid-->
                                <div class="col-md-12">
                                    @Html.LabelFor(model => model.Structureid, "Select Salary Structure:", new { @class = "control-label " })

                                    @Html.DropDownListFor(model => model.Structureid, Model.StructureList, " Select Structure ", new { @id = "Structureid", @class = "form-control select2", @required = "required" })
                                    @Html.ValidationMessageFor(model => model.Structureid, string.Empty, new { @class = "help-block" })
                                    <span class="help-block" id="Structureidmsg" />
                                </div>
                                <!---Variable_Name-->
                                <div class="col-md-12">
                                    @Html.LabelFor(model => model.VariableName, "Variable name:", new {@class = "control-label "})

                                    @Html.TextBoxFor(model => model.VariableName, new {id = "VariableName", @class = "form-control", placeholder = "Variable name "})
                                    @Html.ValidationMessageFor(model => model.VariableName, string.Empty, new {@class = "help-block"})
                                    <span class="help-block" id="VariableNamemsg" />
                                </div>

                                <div class="col-md-12">
                                    @Html.LabelFor(model => model.payheadtype, "Pay Head Type", new {@class = "control-label"})
                                    @Html.DropDownListFor(model => model.payheadtype, new List<SelectListItem>
                                    {
                                        new SelectListItem {Text = "Earnings for Employees", Value = "Earnings for Employees"},
                                        new SelectListItem {Text = "Deductions from Employees", Value = "Deductions from Employees"},
                                        new SelectListItem {Text = "Employee’s Statutory Deductions", Value = "Employee’s Statutory Deductions"},
                                        new SelectListItem {Text = "Employer’s Statutory Contributions", Value = "Employer’s Statutory Contributions"},
                                        new SelectListItem {Text = "Employer’s Other Charges", Value = "Employer’s Other Charges"},
                                        new SelectListItem {Text = "Bonus", Value = "Bonus"},
                                        new SelectListItem {Text = "Gratuity", Value = "Gratuity"},
                                        new SelectListItem {Text = "Loans and Advances", Value = "Loans and Advances"},
                                        new SelectListItem {Text = "Reimbursements to Employees", Value = "Reimbursements to Employees"},

                                    }, "Pay Head Type", new {@class = "form-control select2", id = "payheadtype"})

                                    @Html.ValidationMessageFor(model => model.payheadtype, string.Empty, new { @class = "help-block" })
                                    <span class="help-block" id="payheadtypemsg" />
                                </div>
                                
                            @if (Model.payheadtype == "Gratuity")
                            {
                                @Html.HiddenFor(model => model.payheadtype)
                            }

                                <!--payslipname-->
                                <div class="col-md-12">
                                    @Html.LabelFor(model => model.payslipname, "Name appear in Payslip", new { @class = "control-label " })

                                    @Html.TextBoxFor(model => model.payslipname, new { id = "payslipname", @class = "form-control", placeholder = "Name appear in Payslip " })
                                    @Html.ValidationMessageFor(model => model.payslipname, string.Empty, new { @class = "help-block" })
                                    <span class="help-block" id="payslipnamemsg" />
                                </div>
                                <!--Under-->
                                <div class="col-md-12">
                                    @Html.LabelFor(model => model.Under, "Under", new { @class = "control-label " })
                                    @Html.DropDownListFor(model => model.Under, new List<SelectListItem>
                                {
                                    new SelectListItem {Text = "Salaries and Remuneration Paid", Value = "Salaries and Remuneration Paid"},
                                    new SelectListItem {Text = "Indirect Expenses", Value = "Indirect Expenses"},
                                    new SelectListItem {Text = "Direct Expenses", Value = "Direct Expenses"},
                                    new SelectListItem {Text = "Current Liabilities", Value = "Current Liabilities"},
                                    new SelectListItem {Text = "Loans & Advance (Assets)", Value = "Loans & Advance (Assets)"},
                                    new SelectListItem {Text = "Employer PF Contributions", Value = "Employer PF Contributions"},
                                    new SelectListItem {Text = "Employer ESI Contributions", Value = "Employer ESI Contributions"}

                                }, "Select Under", new { @class = "form-control select2", id = "under" })

                                    @Html.ValidationMessageFor(model => model.Under, string.Empty, new { @class = "help-block" })
                                    <span class="help-block" id="statusmessage" />
                                </div>

                            <div class="DivGratutyall">
                                <div class="divempPTdeduction">
                                    <!--statutorypaytype-->
                                    <div class="col-md-12">
                                        @Html.LabelFor(model => model.statutorypaytype, "Statutory Pay Type", new {@class = "control-label "})
                                        @Html.TextBoxFor(model => model.statutorypaytype, new {id = "statutorypaytype", @class = "form-control", placeholder = "Enter Statutory PayType  "})
                                        @Html.ValidationMessageFor(model => model.statutorypaytype, string.Empty, new {@class = "help-block"})
                                        <span class="help-block" id="statutorypaytypemsg" />
                                    </div>

                                    <!--Registration No-->
                                    <div class="col-md-12">
                                        @Html.LabelFor(model => model.RegistrationNo, "Registration No", new {@class = "control-label "})
                                        @Html.TextBoxFor(model => model.RegistrationNo, new {id = "RegistrationNo", @class = "form-control", placeholder = "Enter Registration No "})
                                        @Html.ValidationMessageFor(model => model.RegistrationNo, string.Empty, new {@class = "help-block"})
                                        <span class="help-block" id="statutorypaytypemsg" />
                                    </div>
                                </div>
                            </div>

                            </div>
                        <div class="col-md-6">
                            <!--Affect Net Salary-->
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.affnetsalary, "Affect Net Salary", new {@class = "control-label"})
                                @Html.DropDownListFor(model => model.affnetsalary, new List<SelectListItem>
                                {
                                    new SelectListItem {Text = "Yes", Value = "Yes"},
                                    new SelectListItem {Text = "No", Value = "No"}
                                }, "Select Affect Net Salary", new {@class = "form-control select2", id = "affnetsalary"})
                                @Html.ValidationMessageFor(model => model.affnetsalary, string.Empty, new {@class = "help-block"})
                                <span class="help-block" id="affnetsalarymsg" />
                            </div>

                            <!--status-->
                            <div class="divincometype col-md-12">
                                @Html.LabelFor(model => model.Status, "Income Type", new {@class = "control-label"})
                                @Html.DropDownListFor(model => model.Status, new List<SelectListItem>
                                {
                                    new SelectListItem {Text = "Fixed", Value = "Fixed"},
                                    new SelectListItem {Text = "Variable", Value = "Variable"},
                                    //new SelectListItem {Text = "Limited", Value = "Limited"}
                                }, "Select Income Type ", new {@class = "form-control select2", id = "Status"})

                                @Html.ValidationMessageFor(model => model.Status, string.Empty, new {@class = "help-block"})
                                <span class="help-block" id="statusmessage" />
                            </div>
                            <!--Gratuity-->
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.Graduity, "Use For Gratuity", new {@class = "control-label"})
                                @Html.DropDownListFor(model => model.Graduity, new List<SelectListItem>
                                {
                                    new SelectListItem {Text = "Yes", Value = "Yes"},
                                    new SelectListItem {Text = "No", Value = "No"},

                                }, "Select Use for Gratuity ", new {@class = "form-control select2", id = "Graduity"})
                                @Html.ValidationMessageFor(model => model.Graduity, string.Empty, new {@class = "help-block"})
                                <span class="help-block" id="Graduitymsg" />
                            </div>

                            <!--Incometaxdetails-->
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.Incometaxdetails, "Set Or Alter Income Tax Details", new {@class = "control-label"})
                                @Html.DropDownListFor(model => model.Incometaxdetails, new List<SelectListItem>
                                {
                                    new SelectListItem {Text = "Yes", Value = "Yes"},
                                    new SelectListItem {Text = "No", Value = "No"},

                                }, "Set Or Alter Income Tax Details", new {@class = "form-control select2", id = "Incometaxdetails"})

                                @Html.ValidationMessageFor(model => model.Incometaxdetails, string.Empty, new {@class = "help-block"})
                                <span class="help-block" id="Incometaxdetailsmsg" />
                            </div>
                            <!--Under-->
                            <div class="col-md-12" id="divCalcuTypeDiveHide">
                                @Html.LabelFor(model => model.calculationtype, "Calculation Type", new {@class = "control-label "})
                                @Html.DropDownListFor(model => model.calculationtype, new List<SelectListItem>
                                {
                                    new SelectListItem {Text = "As Computed Value", Value = "As Computed Value"},
                                    new SelectListItem {Text = "As User-Defined Value", Value = "As User-Defined Value"},
                                    new SelectListItem {Text = "Flat Rate", Value = "Flat Rate"},
                                    new SelectListItem {Text = "On Attendance", Value = "On Attendance"},
                                    //new SelectListItem {Text = "On Production", Value = "On Production"}

                                }, "Select Calculation Type", new {@class = "form-control select2", id = "Calculationtype", @disabled = "disabled"})
                                @Html.ValidationMessageFor(model => model.calculationtype, string.Empty, new {@class = "help-block"})
                                <span class="help-block" id="statusmessage" />
                            </div>
                            <!--Leave With pay-->
                            <div class="col-md-12" id="divattendaceleave">
                                @Html.LabelFor(model => model.attendaceleave, "Attendance leave with pay", new {@class = "control-label "})

                                @Html.DropDownListFor(model => model.attendaceleave, new List<SelectListItem>
                                {
                                    new SelectListItem {Text = "Not Applicable", Value = "Not Applicable"},
                                    new SelectListItem {Text = "present", Value = "present"},
                                    new SelectListItem {Text = "Absent", Value = "Absent"}
                                }, "Attendance leave with pay", new {@class = "form-control select2", id = "attendaceleave"})

                                @Html.ValidationMessageFor(model => model.attendaceleave, string.Empty, new {@class = "help-block"})
                                <span class="help-block" id="attendaceleavemsg" />

                            </div>

                            <!--Calculation Period-->
                            <div class="calperiod col-md-12">
                                @Html.LabelFor(model => model.Calculationperiod, "Calculation Period", new {@class = "control-label "})

                                @Html.DropDownListFor(model => model.Calculationperiod, new List<SelectListItem>
                                {
                                    new SelectListItem {Text = "Month", Value = "Month"}
                                    //, new SelectListItem {Text = "Year", Value = "Year"}
                                }, new {@class = "form-control select2", id = "CalculationPeriod"})

                                @Html.ValidationMessageFor(model => model.Calculationperiod, string.Empty, new {@class = "help-block"})
                                <span class="help-block" id="statusmessage" />
                            </div>

                            <!--productiontype-->
                            @*<div class="col-md-12 divproduction">
                                @Html.LabelFor(model => model.productiontype, "Production Type", new {@class = "control-label "})

                                @Html.DropDownListFor(model => model.productiontype, new List<SelectListItem>
                                {
                                    new SelectListItem {Text = "Overtime hrs", Value = "Overtime hrs"},
                                    new SelectListItem {Text = "piece production", Value = "piece production"}
                                }, "Select Production Type", new {@class = "form-control select2", id = "CalculationPeriod"})

                                @Html.ValidationMessageFor(model => model.productiontype, string.Empty, new {@class = "help-block"})
                                <span class="help-block" id="statusmessage" />
                            </div>*@

                        </div>

                        <div class="col-md-6">
                            @Html.RadioButtonFor(x => x.IsearningDeduction, "Earning") Earning
                            @Html.RadioButtonFor(x => x.IsearningDeduction, "Deduction")Deduction
                        </div>

                            <!--Slab Type-->
                            <div class="col-md-6" id="divPerValue">
                                @Html.LabelFor(model => model.PerValue, "Select Slab", new { @class = "control-label " })

                                @Html.DropDownListFor(model => model.PerValue, new List<SelectListItem>
                                    {
                                        new SelectListItem {Text = "Value", Value = "Value"},
                                        new SelectListItem {Text = "Percentage", Value = "Percentage"}
                                    }, "Select Slab Type", new { @class = "form-control select2", id = "PerValue" })

                                @Html.ValidationMessageFor(model => model.PerValue, string.Empty, new { @class = "help-block" })
                                <span class="help-block" id="Roundingmethodmsg" />
                            </div>

                            <!--Slab Type-->
                            <div class="col-md-6" id="divValue">
                                @Html.LabelFor(model => model.Value, "Enter Value", new { @class = "control-label" })
                                @Html.TextBoxFor(model => model.Value, new { id = "value", @class = "form-control", placeholder = "Enter Value" })
                                @Html.ValidationMessageFor(model => model.Value, string.Empty, new { @class = "help-block" })
                                <span class="help-block" id="Roundingmethodmsg" />
                            </div>
                            <div class="col-md-12 rounding">
                                <!--productiontype-->
                                <div class="col-md-6">
                                    @Html.LabelFor(model => model.Roundingmethod, "Rounding Method", new { @class = "control-label " })

                                    @Html.DropDownListFor(model => model.Roundingmethod, new List<SelectListItem>
                                    {
                                        new SelectListItem {Text = "Not Applicable", Value = "Not Applicable"},
                                        new SelectListItem {Text = "Downword Rounding", Value = "Downword Rounding"},
                                        new SelectListItem {Text = "Upword Rounding", Value = "Upword Rounding"},
                                        new SelectListItem {Text = "Normal Rounding", Value = "Normal Rounding"}
                                    }, "Select Production Type", new { @class = "form-control select2", id = "Roundingmethod" })

                                    @Html.ValidationMessageFor(model => model.Roundingmethod, string.Empty, new { @class = "help-block" })
                                    <span class="help-block" id="Roundingmethodmsg" />
                                </div>
                                <!---VariableName-->
                                <div class="col-md-6">
                                    @Html.LabelFor(model => model.roundinglimit, "Limit:", new { @class = "control-label " })
                                    @Html.TextBoxFor(model => model.roundinglimit, new { id = "Limit", @class = "form-control", placeholder = "Limit " })
                                    @Html.ValidationMessageFor(model => model.roundinglimit, string.Empty, new { @class = "help-block" })
                                    <span class="help-block" id="roundinglimitmsg" />
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="col-md-12 Ascomputeddiv">
                                    <div class="col-md-offset-5">
                                        <h3>Computation Info</h3>
                                    </div>
                                    <!--Under-->
                                    <div class="col-md-6">
                                        @Html.LabelFor(model => model.compute, "Compute", new {@class = "control-label "})
                                        @Html.DropDownListFor(model => model.compute, new List<SelectListItem>
                                        {
                                            //new SelectListItem {Text = "On Current Deduction Total", Value = "On Current Deduction Total"},
                                            new SelectListItem {Text = "On Current Earning Total", Value = "On Current Earning Total"},
                                            //new SelectListItem {Text = "On Current  SubTotal", Value = "On Current SubTotal"},
                                            new SelectListItem {Text = "On Specified Formula", Value = "On Specified Formula"},
                                        }, "Select Calculation Type", new {@class = "form-control select2", id = "compute", style = "width: 200px;"})

                                        @Html.ValidationMessageFor(model => model.compute, string.Empty, new {@class = "help-block"})
                                        <span class="help-block" id="computemsg" />
                                    </div>

                                    <!--As computed Value-->
                                    <div class="col-md-6 calculatebynew">
                                        @Html.LabelFor(model => model.CalculateFrom1, "Calculate by", new {@class = "control-label", id = "lblcalculateBy"})
                                        @*@Html.DropDownList("CategoryId", (MultiSelectList)ViewBag.Categories, new { multiple = "multiple", @class = "form-control select2" })*@
                                        @Html.DropDownList("CalculateFrom1", (IEnumerable<SelectListItem>) ViewBag.Categories, "Select Pay heads", new {@class = "form-control select2", @multiple = "multiple", style = "width: 200px;"})
                                    </div>

                                    <table id="tblPets" cellpadding="0" cellspacing="0" class="table custom-tablePopup table-bordered  table-responsive">
                                        <thead>
                                        <tr>
                                            <td></td>
                                            <th>Effective From</th>
                                            <th>From Amount</th>
                                            <th>Amount Upto</th>
                                            <th>Slab Type</th>
                                            <th>Value Basis</th>
                                            <th></th>
                                        </tr>
                                        </thead>
                                        <tbody>

                                            @foreach (var VARIABLE in Model.TblSpecifiedList)
                                            {
                                                <tr>
                                                    <td>
                                                        <input type="hidden" id="FormulaId" name="FormulaId" value="@VARIABLE.FormulaId" />
                                                    </td>
                                                    <td>
                                                        <input type="text" name="effectivefrom" value="@VARIABLE.EffectiveFrom" maxlength="30" class=" form-control usedatepicker" id="effectDate"/>                                                       
                                                    </td>
                                                    <td>
                                                        <input type="text" name="fromamount" value="@VARIABLE.FromAmount" maxlength="30" class=" form-control onlynumberval" id="fromAmount"/>                                                        
                                                    </td>
                                                    <td>
                                                        <input type="text" name="AmountUpto" value="@VARIABLE.AmountUpto" maxlength="30" class=" form-control onlynumberval" id="amountUpto"/>                                                        
                                                    </td>

                                                    <td>
                                                        @Html.DropDownList("Formulaslabtype", new SelectList(new[]
                                                        {
                                                            new {Value = "", Text = "None"},
                                                            new {Value = "true", Text = "Value"},
                                                            new {Value = "false", Text = "Percentage"},
                                                        },
                                                            "Value",
                                                            "Text",
                                                            @VARIABLE.SlabType.Value
                                                         ), new { @class = "form-control", required = "required", id = "computedSlabtype" }
                                                            )                                                        
                                                    </td>

                                                    <td>
                                                        <input type="text" name="valuebasis" value="@VARIABLE.ValueBasis" size="30" maxlength="30" class=" form-control"/>                                                        
                                                    </td>
                                                    <td>
                                                        <img src="~/Images/icon_03.png" onclick="delRow(@VARIABLE.FormulaId)" style="width: 22px; cursor: pointer;"/>
                                                    </td>
                                                </tr>
                                            }


                                        </tbody>
                                    </table>
                                    <div class="">
                                        <div class="btn btn-success pull-right" onclick=" addRow('tblPets') ">Add New Row</div>
                                    </div>
                                </div>
                                <div class="col-md-12 DivGratuty">
                                    <div class="col-md-offset-5">
                                        <h3>Gratuity Info</h3>
                                    </div>
                                    <table id="tblgratuty" cellpadding="0" cellspacing="0" class="table custom-tablePopup table-bordered  table-responsive">
                                        <thead>
                                        <tr>
                                            <th></th>
                                            <th>From</th>
                                            <th>To</th>
                                            <th>
                                                Eligibility Days for
                                                gratuity Calculation per Year
                                            </th>
                                            <th></th>
                                        </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var ex in Model.TblgratuityList)
                                            {
                                                <tr>
                                                    <td>
                                                        <input type="hidden" id="gratuityid" name="gratuityid" value="@ex.GratuityId" />
                                                    </td>
                                                    <td><input type="text" name="fromMonthGratuity" value="@ex.FromMonth" maxlength="30" class=" form-control onlynumberval" id="fromMonth"/></td>
                                                    <td><input type="text" name="toMonthGratuity" value="@ex.ToMonth" maxlength="30" class=" form-control onlynumberval" id="toMonth"/></td>
                                                    <td><input type="text" name="eligibleDaysGratuity" value="@ex.EligibleDays" maxlength="30" class=" form-control onlynumberval" id="eligibledays"/></td>
                                                    <td>
                                                        <img src="~/Images/icon_03.png" onclick="delRow1(@ex.GratuityId)" style="width: 22px; cursor: pointer;"/>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                    <div class=""><div class="btn btn-success pull-right" onclick=" addRow1('tblgratuty') ">Add New Row</div></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="box-footer">
                        <input type="submit" value="Update" class="btn btn-default pull-right" />
                        <a href='@Url.Action("Index", "VariableSettings")' class="btn btn-default pull-left"> Back to list</a>
                    </div>
                </div>
            }
        </section>
    </div>
</section>
<script type="text/javascript">
    
    //$(document).ready(function () {
    //    $("#PerValue").change(function () {
    //        alert("iin");
    //        var end = this.value;
    //        if (end === "Percentage") {
    //            $("#value").blur(function () {
    //                var getvalue = $('#value').val();
    //                $('#form').submit(function () {
    //                    var perorvalue = $("#value").val();

    //                    alert(perorvalue);
    //                    if (getvalue >= 100) {
    //                        alert("Percentage less than 100");
    //                        return false;
    //                    }
    //                });
    //            });
    //        }
    //        else { return true; }
    //    });
    //});


    $(document).ready(function () {
        $("#PerValue").change(function () {
            var end = this.value;
            if (end === "Percentage") {
                $("#value").blur(function () {
                    var getvalue = $('#value').val();
                    if (getvalue >= 101) {
                        alert("Percentage less than 100.");
                    }
                });
            }
        });
    });


    $(function () {
        $('#form').submit(function () {
            var getvalue = $('#value').val();
            var PerOrVal = $('#PerValue').val();       
            if (PerOrVal === "Percentage" && getvalue >= 101) {
                alert("Percentage less than 100");
                return false;
            }
        });
    });


    $("#VariableName").blur(function () {
        var Name = $("#VariableName").val();
        //  $('#payslipname').attr("value", Name);
        $("#payslipname").val(Name);

    });

    $(function () {
        $('.calculatebynew').hide();
        $(document).ready(function () {
            var Name = $("#compute").val();
            //  $('#payslipname').attr("value", Name);
            if ('On Specified Formula' === Name) {
                $('.calculatebynew').show();
            } else {
                $('.calculatebynew').hide();
            }
        });

    });
    $(function () {
        $('.calculatebynew').hide();
        $("#compute").change(function () {
            var Name = $("#compute").val();
            //  $('#payslipname').attr("value", Name);
            if ('On Specified Formula' === Name) {
                $('.calculatebynew').show();
            } else {
                $('.calculatebynew').hide();
            }
        });

    });
    $(function () {
        $('.rounding').hide();
        $("#Calculationtype").change(function () {
            var Name = $("#Calculationtype").val();
            //  $('#payslipname').attr("value", Name);
            if ('As User-Defined Value' === Name) {
                $('.rounding').hide();
            } else {
                $('.rounding').show();
            }
        });
    });
    $(function () {
        $('.Ascomputeddiv').hide();
        $('.divproduction').hide();
        $("#Calculationtype").change(function () {
            var id = $("#Calculationtype").val();
            if (id === 'As Computed Value') {
                $('.Ascomputeddiv').show();
            } else {
                $('.Ascomputeddiv').hide();
            }
            if (id === 'On Production') {
                $('.divproduction').show();
            } else {
                $('.divproduction').hide();
            }
        });
    });


    $(function () {
        $('.Ascomputeddiv').hide();
        $('.divproduction').hide();
        $(document).ready(function () {
            var id = $("#Calculationtype").val();
            if (id === 'As Computed Value') {
                $('.Ascomputeddiv').show();
            } else {
                $('.Ascomputeddiv').hide();
            }
            if (id === 'On Production') {
                $('.divproduction').show();
            } else {
                $('.divproduction').hide();
            }
        });
    });

    $(function () {
        $('.calperiod').hide();
        $("#Calculationtype").change(function () {
            var id = $("#Calculationtype").val();
            if (id === 'As Computed Value') {
                $('.calperiod').show();
                $('#divPerValue').hide();
                $('#divValue').hide();
                $('#divattendaceleave').hide();

            } else {
                $('.calperiod').hide();
                $('#divPerValue').show();
                $('#divValue').show();
                $('#divattendaceleave').show();
            }
        });
    });


    $(function () {
        $('.divincometype').hide();
        $("#payheadtype").change(function () {
            var id = $("#payheadtype").val();
            if (id === 'Earnings for Employees' || id === 'Reimbursements to Employees') {
                $('.divincometype').show();
                $('#divPerValue').show();
                $('#divValue').show();
                $('#divCalculationhide').show();                
            } else {
                $('.divincometype').hide();
            }
        });
    });


    $(function () {
    $(document).ready(function() {
        var id = $("#payheadtype").val();
        if (id === 'Earnings for Employees' || id === 'Reimbursements to Employees') {
            $('.divincometype').show();
            $('#divPerValue').show();
            $('#divValue').show();
            $('#divCalculationhide').show();
                
        } else {
            $('.divincometype').hide();
        }
    });
    });

    $(function () {
        $('.DivGratuty').hide(); $('.DivGratutyall').show();
        $("#payheadtype").change(function () {
            debugger;
            var id = $("#payheadtype").val();
            if (id === 'Gratuity') {
                $('.DivGratuty').show();
                $('#divCalcuTypeDiveHide').hide();
                $('.DivGratutyall').hide();
                $('.Ascomputeddiv').hide();
            }
            else { $('.DivGratuty').hide(); $('.DivGratutyall').show(); }
        });
    });

    $(function () {
        $('.DivGratuty').hide(); $('.DivGratutyall').show();
        $(document).ready(function () {
            debugger;
            var id = $("#payheadtype").val();
            if (id === 'Gratuity') {
                $('.DivGratuty').show();
                $('#divCalcuTypeDiveHide').hide();
                $('.DivGratutyall').hide();
                $('.Ascomputeddiv').hide();
            }
            else { $('.DivGratuty').hide(); $('.DivGratutyall').show(); }
        });
    });

    $(function () {
        $('.divempPTdeduction').hide();
        $("#payheadtype").change(function () {
            var id = $("#payheadtype").val();
            if (id === 'Employee’s Statutory Deductions') { $('.divempPTdeduction').show(); }
            else { $('.divempPTdeduction').hide(); }
        });

    });


    $(function () {
        $('.divempPTdeduction').hide();
        $(document).ready(function () {           
            var id = $("#payheadtype").val();
            if (id === 'Employee’s Statutory Deductions') { $('.divempPTdeduction').show(); }
            else { $('.divempPTdeduction').hide(); }
        });
    });



    $(function () {
        $("#Calculationtype").change(function () {
            var Name = $("#Calculationtype").val();
            if ('As Computed Value' === Name) {
                $('#form').submit(function () {
                    if ($.trim($("#effectDate").val()) === "" || $.trim($("#fromAmount").val()) === "") {
                        alert('Please fill computation Info.');
                        return false;
                    }
                });
            } else {
                return true;
            }
        });
    });

    $(function () {
        $("#payheadtype").change(function () {
            var Name = $("#payheadtype").val();
            if ('Gratuity' === Name) {
                $('#form').submit(function () {
                    if ($.trim($("#fromMonth").val()) === "" || $.trim($("#toMonth").val()) === "" || $.trim($("#eligibledays").val()) === "") {
                        alert('Please fill Gratuity information then submit.');
                        return false;
                    }
                });
            } else {
                return true;
            }
        });
    });

</script>

@*<script type="text/javascript">

        $(function () {
            $(document).ready(function () {
                var id = $("#Calculationtype").val();
                alert('User-Defined Value');
                if (id === 'As User-Defined Value') {
                    $('#divPerValue').show();
                    $('#divValue').show();
                } else {
                    $('.rounding').hide();
                    $('#divPerValue').hide();
                    $('#divValue').hide();
                }
            });
        });
    </script>*@



<script type="text/javascript">
    
    $(document).ready(function () {
        var id = $("#payheadtype").val();
        if (id === 'Gratuity') {
            $("#payheadtype").prop("disabled", true);
        }
    });
</script>



<script type="text/javascript">
    $(function () {
        $(document).ready(function () {
            var id = $("#Calculationtype").val();
            if (id === 'On Attendance' || id === 'On Production' || id === 'Flat Rate') {
                $('.rounding').show();
                $('#divPerValue').show();
                $('#divValue').show();
            } else if (id === 'As User-Defined Value') {
                $('#divPerValue').show();
                $('#divValue').show();
            }
            else {
                $('.rounding').hide();
                $('#divPerValue').hide();
                $('#divValue').hide();
            }
            //if (id === 'As User-Defined Value') {
            //    $('#divPerValue').show();
            //    $('#divValue').show();
            //} else {
            //    $('.rounding').hide();
            //    $('#divPerValue').hide();
            //    $('#divValue').hide();
            //}
        });
    });
</script>


@*<script type="text/javascript">
        $(function () {
            $(document).ready(function () {

                var id = $("#Calculationtype").val();
                if (id === 'On Production') {
                    $('.rounding').show();
                    $('#divPerValue').show();
                    $('#divValue').show();
                } else if (id === 'As User-Defined Value') {
                    $('#divPerValue').show();
                    $('#divValue').show();
                }
                else {
                    $('.rounding').hide();
                    $('#divPerValue').hide();
                    $('#divValue').hide();
                }
            });
        });
    </script>*@


<script type="text/javascript">
    $(function () {
        $("#computedSlabtype").change(function () {
            var getval = $('#computedSlabtype :selected').text();
            if (getval === "Percentage") {
                $("#valuebasis").blur(function () {
                    var getvalue = $('#valuebasis').val();
                    if (getvalue >= 100) {
                        alert("Percentage less than 100");
                        return false;
                    }
                });
            } else {
            }
        });
    });


    $(function () {
        $("#computedSlabtype").change(function () {
            var getval1 = $('#computedSlabtype :selected').text();
            if (getval1 === "Percentage") {
                $('#form').submit(function () {
                    var getvalue = $('#valuebasis').val();
                    if (getvalue >= 100) {
                        alert("Percentage less than 100");
                        return false;
                    }
                });
            } else {
                return true;
            }
        });
    });

</script>




<script type="text/javascript">
    $(function () {
        $(function () {
            $(".datepicker2").datepicker();
        });
        $("#IsEarnings").change(function () {
            var isChecked = $(this).is(":checked");
            if (isChecked === true) {
                $("#IsDuductions").prop("checked", false);
            }
        });

        $("#IsDuductions").change(function () {
            var isChecked = $(this).is(":checked");
            if (isChecked === true) {
                $("#IsEarnings").prop("checked", false);

            }
        });
        $("#IsCalculateFromCtc").change(function () {
            var isChecked = $(this).is(":checked");
            if (isChecked === true) {
                debugger;
                $('.calculatebynew').hide();
                $("#calculateBy").prop("disabled", true);
                $("#CalculateFrom2").prop("disabled", true);
                //$("#CalculateFrom3").prop("disabled", true);
                $("#CalculateFrom1").val("0");
                $("#CalculateFrom2").val("0");
                //$("#CalculateFrom3").val("0");
            } else {
                $('.calculatebynew').show();
                $("#calculateBy").prop("disabled", false);
                $("#CalculateFrom2").prop("disabled", false);
                //$("#CalculateFrom3").prop("disabled", false);
            }

            //$('#someDivId').toggle(isChecked);
        });
        $("#Status").change(function () {
            var selectedText = $(this).find("option:selected").text();
            if (selectedText === "Limited") {
                $("#calculateBy").prop("disabled", true);
                $("#CalculateFrom2").prop("disabled", true);
                //$("#CalculateFrom3").prop("disabled", true);
                $("#IsCalculateFromCtc").prop("disabled", true);
                $("#Persentage").prop("disabled", true);
                $("#GraterThanLimit").prop("disabled", false);
                $("#GraterLimitAmt").prop("disabled", false);
                $("#LessThanLimit").prop("disabled", false);
                $("#LessLimitAmt").prop("disabled", false);
                $("#Persentage").val("");
                $("#calculateBy").val("0");
                $("#CalculateFrom2").val("0");
                //$("#CalculateFrom3").val("0");
                $("#IsCalculateFromCtc").prop("checked", false);
            } else {
                $("#calculateBy").prop("disabled", false);
                $("#CalculateFrom2").prop("disabled", false);
                //$("#CalculateFrom3").prop("disabled", false);
                $("#IsCalculateFromCtc").prop("disabled", false);
                $("#Persentage").prop("disabled", false);
                $("#GraterThanLimit").prop("disabled", true);
                $("#GraterLimitAmt").prop("disabled", true);
                $("#LessThanLimit").prop("disabled", true);
                $("#LessLimitAmt").prop("disabled", true);
                $("#GraterThanLimit").val("");
                $("#GraterLimitAmt").val("");
                $("#LessThanLimit").val("");
                $("#LessLimitAmt").val("");
            }
        });
    });


</script>

<script type="text/javascript">
    $.noConflict();
    jQuery(document).ready(function () {
        $("#divPerValue").hide();
        $("#divValue").hide();

        $(".select2").select2();
        if (true) {
            if ('@TempData["notice"]' === "success") {
                $.notify(" Record Inserted  Successfully ! ", "success");
            }
            if ('@TempData["notice"]' === "update") {
                $.notify(" Record Updated  Successfully ! ", "success");
            }
            if ('@TempData["notice"]' === "exist") {
                $.notify(" Record Already Exist ! ", "warn");
            }
            if ('@TempData["notice"]' === "delete") {
                $.notify(" Record Deleted Successfully ! ", "success");
            }
            if ('@TempData["notice"]' === "cantdelete") {
                $.notify(" Can't delete, because this used some where. ! ", "warn");
            }
        }

    });
</script>

<script type="text/javascript">

    $(document).ready(function () {
        $("#divPerValue").hide();
        //Dropdownlist Selectedchange event
        $("#Structureid").change(function () {
            debugger;
            $("#ddlCalculateby").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetPayhead")', // we are calling json method

                dataType: 'json',

                data: { id: $("#Structureid").val() },
                // here we are get value of selected country and passing same value
                //as inputto json method GetStates.

                success: function (variableList) {
                    // states contains the JSON formatted list
                    // of states passed from the controller

                    $.each(variableList, function (i, variable) {
                        $("#ddlCalculateby").append('<option value="' + variable.Value + '">' +
                            variable.Text + '</option>');
                        // here we are adding option for States
                    });
                },
                error: function (ex) {
                    alert('Failed to retrieve variables.' + ex);
                }
            });
            return false;
        });
    });



    $(document).ready(function () {
        $(".onlynumberval").keydown(function (e) {
            // Allow: backspace, delete, tab, escape, enter and .
            if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
                // Allow: Ctrl+A, Command+A
                (e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true)) ||
                // Allow: home, end, left, right, down, up
                (e.keyCode >= 35 && e.keyCode <= 40)) {
                // let it happen, don't do anything
                return;
            }
            // Ensure that it is a number and stop the keypress
            if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                e.preventDefault();
            }
        });
    });

</script>

